УДК 004.6
 
Р. А. Симаков, кандидат технических наук, Научно исследовательский институт системных исследований РАН
А. В. Смирнов, аспирант, Владимирский государственный университет
 
Проблема оптимизации запросов в многомерной распределенной СУБД
 
Ключевые слова: СУБД, запрос, оптимизация, кластер
 
Данная работа кратко описывает научную распределенную многомерную СУБД SciDB и показывает проблемы возникшие при проектировании и разработке подсистемы оптимизации запросов в ней.
 
Введение
 
Рост количества данных неизменно приводит к снижению производительности систем работающих с ними. Эффективные методы обработки запросов являются неотъемлемым элементом современных СУБД. Задача оптимизации запросов в идеале считается неразрешимой, так как оптимизатор запросов всегда будет подвержен нехватке статистической информации о базе данных и ее неточности и ему придется полагаться на эвристику, поэтому, термин «оптимизация» применительно к запросам, используется для обозначения некоторых преобразований, направленных на улучшение процедуры выполнения запроса. На данный момент было предложено большое разнообразие подходов к оптимизации запросов в СУБД, но, большинство исследований по оптимизации сфокусированы на централизованных реляционных СУБД, однако, в настоящее время большинство научных областей имеет потребность в создании сверхбольших хранилищ данных представленных в виде структур отличных от реляционных, что влечет за собой необходимость разработки новейших распределенных СУБД и применения к ним иных подходов к хранению, манипуляции, выборке и, соответственно, оптимизации [1].
SciDB - представляет собой высокопроизводительную распределенную многомерную СУБД для обработки научных данных. Под многомерностью понимается то, что все данные в СУБД организованы в виде многомерных массивов, ячейки которых содержат атрибуты, непосредственно содержащие данные. Подобная модель позволяет решать множество исследовательских задач, например выявление на снимках скопления объектов, определение их характеристик, скорости перемещения и различные аномальные явления.
Как и традиционные СУБД, SciDB имеет язык запросов для манипулирования и извлечения данных из БД. Запрос в SciDB проходит следующие этапы (рисунок 1):
Лексический и синтаксический анализ. На данном этапе, после анализа синтаксической верности строки запроса, возвращает его внутренне представление в виде абстрактного дерева запроса (АДЗ), отражающее его структуру, но лишенное семантической составляющей.
Семантический анализ. На данном этапе СУБД извлекает метаданные из системного каталога БД и связывает их с АДЗ, выполняя проверку существования фигурирующих в запросе массивов, измерений, атрибутов, проверку совместимости типов и т. д. В этот момент также извлекаются статистические данные, которые потребуются оптимизатору. Полученное дерево запроса немногим отличается от АДЗ. Как бы то ни было, данный запрос не может выполняться, так как на этом шаге - не является процедурным.
На этапе оптимизации на основе метаданных и статистической информации в соответствии с АДЗ генерируется множество альтернативных процедурных планов запроса. Для каждого сгенерированного плана подсчитывается стоимость выполнения и выбирается наиболее дешевый. Выбранный план является результатом работы оптимизатора и его внутреннее представление соответствует обрабатываемому изначальному запросу.
Реальное выполнение запроса в соответствии с полученным планом запроса.
 
Рисунок 1 - Порядок выполнения запроса
 
Для реляционных СУБД оптимальный план выполнения запроса — это такая перестановка всех исходных выбираемых таблиц, реляционное соединение которых в выбранной последовательности, представленное в процедурном виде, может быть выполнено за минимальное число операций. Для SciDB это утверждение в целом также верно, за исключением того, что в ней место реляционной алгебры занимает алгебра многомерных массивов. На данный момент вторая и третья фазы отсутствуют в SciDB ли находятся в зачаточном состоянии, для получения в будущем полноценной СУБД предлагается рассмотреть особенности и проблемы оптимизатора распределенных многомерных запросов [2].
 
Процедура оптимизации запроса в классических СУБД
 
Для начала рассмотрим приемы оптимизации запросов, которые предлагаю современные реляционные СУБД (данные основаны на оптимизаторах Firebird, PostgreSQL и Oracle), чтобы попытаться применить к ним свойства многомерной распределенной СУБД [3, 4, 5].
Обычно основной фазе оптимизации предшествует фаза семантической оптимизация SQO (Semantic Query Optimization). Это класс логических преобразований плана запроса нацеленных на упрощение его структуры. Упрощение структуры сводится к следующим шагам:
Преобразование запросов в каноническую форму;
Раскрытие представлений;
Преобразование подзапросов в соединения;
Спуск предикатов вниз по дереву запросов;
Упрощение условий и распределение предикатов;
Преобразование дерева условий в пути выборки.
 
После выведения упрощенного запроса в ход вступает основная фаза оптимизации — генерация альтернативных планов и их оценка:
Оптимизатор основанный на правилах RBO (Rule Based Optimizer).
Под RBO подразумеваются подсчет стоимости запроса по определенным заранее подготовленным статическим правилам. Каждому правилу из набора назначен свой вес. Оптимизатор во время своей работы берет каждую альтернативную ветку выполнения запроса и в соответствии с назначенными правилами подсчитывает ее вес. В настоящий момент СУБД практически не используют данный подход из-за крайней его ограниченности и небольшой степени оптимизации.
Оптимизатор основанный на стоимости CBO (Cost Based Optimizer).
Хотя в RBO тоже используется понятие стоимости, в CBO оно носит несколько другой характер. Если для RBO — это стоимость основанная только на логической структуре запроса, для CBO стоимость — это непосредственно сложность извлечения того или иного набора данных. Для подсчета стоимости запроса в CBO широко используется статистическая информация. На основе нее подсчитываются мощности наборов данных и селективность операторов, что в конечном счете дает возможность оценить количество обрабатываемым физическим оператором данных, дать оценку ему и посчитать суммарную оценку.
Статистическая информация - описание количества и распределения данных на разных уровнях (таблица, запись, столбец)
Для таблицы;
Среднее заполнение страницы (под страницей в данном случае понимается физическая страница данных в базе данных, в формате используемой СУБД);
Средняя длина записи;
Количество записей;
Индекс;
Глубина B-дерева;
Средняя длина ключа;
Фактор кластеризации (на сколько данные случайно "разбросаны" в отношении);
Столбец;
Селективность;
Количество столбцов, значение которых может быть null;
Гистограмма распределения значений.
 
Генерация множества планов в РСУБД (реляционных СУБД) основывается на поиске альтернативных способов выполнения реляционных соединений. Генерация включает в себя использование статистической информации и приемов эвристического анализа:
Индексированный доступ или нет;
Если селективность близка к 1, то выбирается полное сканирование таблицы, а не индексированный доступ ;
По количеству ячеек, значение которых может быть установлено в null;
По гистограмме распределения;
Выбор индекса (сравниваются селективности и стоимости доступа индексов и выбирается лучший);
Выбор порядка потоков в соединениях вложенными циклами (loop join) ( генерируются различные комбинации, подсчитываются их стоимости и выбирается лучшая);
Агрегация сортировкой или хешированием;
По селективности группируемых столбцов;
Соединение вложенными циклами (loop join), слиянием (merge join) или хешированием (hash join);
По мощности отношений и предикатов;
Доступ к данным с помощью индексу или внешняя сортировка;
По фактору кластеризации.
 
Поиск самого оптимального плана во множестве альтернативных планов запроса в общем виде можно представить как задачу комбинаторной оптимизации - задачу коммивояжера (Travelling salesman problem, TSP). В РСУБД используются 3 основных стратегии для ее решения:
1. Полный перебор
2. Генетические алгоритмы
3. Алгоритмы динамического программирования
 
Рассмотренные оптимизаторы достаточно прочно привязаны к реляционной модели: состав статистической информации, способы генерации альтернативных планов применимы исключительно к РСУБД. Тем не менее, просматривается достаточно общая модель оптимизатора, поэтому пользуясь этим общим подходом к оптимизации в РСУБД рассмотрим проблемы, которые необходимо решить при разработке оптимизатора многомерной распределенной СУБД.
 
Проблемы создания оптимизатора для многомерной распределенной СУБД
 
Многомерная модель данных — это одна из отличительных черт SciDB. Она привносит, как совершенно иной язык запросов с новыми операторами и их свойствами, так и внутренние атрибуты оптимизатора: индексы и статистику. Для получения полноценного семантического оптимизатора, а также выведения закономерностей для генерации планов запросов на основной стадии оптимизатора необходимо собрать достаточно большой набор операторов для исследования. Данный набор должен включать базовые операторы для манипулирования многомерными структурами, например какие-либо операторы матричной алгебры, а также пользовательские операторы полученные в ходе исследования предметных научных областей. Выработка полноценного универсального интерфейса пользовательских операторов, а также изучение их взаимодействия - первостепенная задача на данном шаге, так как предполагается, что набор операторов не будет фиксированным и СУБД изначально имеет ограниченный набор базовых функций. Оптимизатор должен адекватно выполнять свою задачу при добавлении операторов пользователем и использовании их в различных сочетаниях [6].
Оптимизатор, как и набор операторов, должен быть расширяемым, то есть добавление нового оператора в SciDB влияет на поведение оптимизатора, оценку операторов, собираемые метаданные, добавляет новые пути генерации/поиска планов. По возможности, каждый оператор нужно рассматривать, как черный ящик не интересуясь его реализацией и ориентируясь лишь по набору метаданных, предоставляемый им. По метаданным оператора, мощности входных данных и текущей загрузке системы оптимизатор должен получить оценку. Оператор должен уметь сообщить оптимизатору каким ресурсам он больше подвержен (диск, память, процессор), что в случае нескольких разных физических его исполнений, зависящих от ресурсов, поможет более оптимально использовать ресурсы системы. Также оптимизатор должен уметь выводить необходимое распределение данных, требуемых для выполнения оператора. В распределение должны входить данные о ячейках, непосредственно над которыми будут выполняться манипуляции, а также данные о вспомогательных ячейках, например ячейки одного узла кластера, требуемые на другом узле, то есть своеобразный «нахлест» частей массивов друг на друга относительно всего объема данных. Распределение наиболее удобно описать в виде функций распределения, каждая из которых будет возвращать номер узла кластера, на который необходимо переместить ячейку.
Перераспределение выполняется перед выполнением каждого оператора, для локализации данных. Это необходимо, потому что все операции в SciDB выполняются исключительно с локальными данными. Каждый оператор получает порцию локальных данных и обрабатывает их, не зная о подробностях и расположении остальных частей, таким образом достигается горизонтальная расширяемость при наращении узлов кластера. Очевидно, что операторы перераспределения, а также связанные с ним функции распределения в АДЗ и логическом запросе не фигурирует, и появляются только в момент оптимизации. Задача оптимизатора определить наиболее выгодный вариант распределения данных, то есть наилучшие функции распределения и расположение операторов в дереве запроса. В качестве параметров для стоимостной функции оператора перераспределения можно включить следующее:
Количество передаваемых данных (мощность массива переданного на вход оператора) - необходимо иметь карту распределения данных во всем кластере;
Оценка загруженности ресурсов узлов кластера;
Оценка загруженности сети;
Вхождение узлов в физические группы, с наименьшим временем отклика.
Оператор перераспределения добавляет дополнительные «измерения» в пространство поиска оптимальных планов: это выбор функции распределения и выбор расположения оператора в дереве запроса, что должно значительно увеличить количество вариантов планов, вполне возможно, приведя идею полного перебора в негодность, поэтому необходимо выбрать более приемлемый метод поиска оптимального запроса. Теоретически, никаких предпочтений тому или иному алгоритму нет, поэтому можно взять любой из классических методов решения TSP в рамках поиска плана с наименьшей стоимостью. Необходимо также оценивать количество генерируемых планов и если вариантов слишком много использовать генетические алгоритмы (например, GEQO)
Не углубляясь в конкретные реализации можно сказать, что устройство оптимизатора SciDB в целом может быть похоже на оптимизатор РСУБД и вполне возможно использовать множество идей из СУБД данного класса. Стоит отметить, что идея расширяемых (хотя и не динамически) оптимизаторов не нова. Работы в данном направлении велись вплоть до появления фреймворков для разработки оптимизаторов, поэтому немаловажно рассмотреть возможность основания оптимизатора на одном из современных фреймворков, например, в виде доработки OPT++. Система OPT++ использует методы объектно-ориентированного программирования для построения оптимизатора и благодаря этому подходу на настоящий момент является одной из универсальных и расширяемых [7].
Поставить конкретные задачи по каждому пункту проблем представляется достаточно сложным, так как сказано выше область исследований современных оптимизаторов ограничивается реляционными моделями, то есть подводить всю теоретическую базу оптимизатора многомерной распределенной СУБД нужно практически с нуля.
Первым шагом в исследовании должна стать попытка выделения и изучения наборов операторов, и запросов на их основе для конкретных отдельно взятых предметных областей. Данный шаг поможет положить начало построения первой части оптимизатора - семантической оптимизации. Изучив операторы, их свойства, требуемые распределения данных, станет возможным проводить над ними базовые преобразования для приведения запросов и предикатов участвующих в них к каноническим формам, далее же, получив расширяемый семантический оптимизатор, можно будет с уверенностью говорить об успехе в будущей разработке и второй фазы оптимизатора — генерации планов, их оценки и выбора наилучших. Исследование и разработку второй фазы оптимизации стоит также разбить на 2 части: оптимизация локальных запросов и оптимизацию распределенных запросов, это позволит более четко выделить проблемы в каждой из них и углубленно их рассмотреть. Первая часть позволит изучить и решить методы генерации равнозначных планов, методы их оценки, а вторая — наложит на готовую базу оптимизатора распределенность, с помощью оператора перераспределения, и углубит изучение методов выбора оптимального плана на обширных пространствах поиска.
 
Заключение
 
Таким образом, мы очертили проблемы, которые предстоит проанализировать и решить в процессе разработки оптимизатора SciDB и определили первую задачу, результат которой необходимо получить, для продолжения исследования, а именно — выведение базового набора операторов и их спецификаций. Более подробные задачи, можно будет выделить, только после ее решения.
 
Список литературы
 
Дейт К. Введение в системы баз данных.- М.: Наука.1980.- 463 c.
Jarke M., Koch J. Query Optimization in Database Systems // ACM Comput. Surv.- 1984.- 16, N 2.- C. 111-152
Genetic Query Optimization (GEQO) in PostgreSQL (http://www.postgresql.org/docs/8.4/static/geqo-pg-intro.html)
Overview of PostgreSQL Internals (developer.postgresql.org/pgdocs/postgres/overview.html)
Oracle8i Designing and Tuning for Performance (http://download.oracle.com/docs/cd/A87860_01/doc/server.817/a76992/optimops.htm)
Requirements for Science Data Bases and SciDB, CIDR'09
Opt++: An Object-Oriented Design for Extensible Database Query Optimization. (http://www.cs.wisc.edu/paradise/papers/opt++_vldbj.ps)
 
Simakov R. A., Smirnov A. V, The problem of query optimization in multi-dimensional distributed DBMS
 
This paper briefly describes the scientific distributed multidimensional database SciDB and shows the problems encountered during design and development of its query optimization subsystem.
