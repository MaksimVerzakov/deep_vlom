62
Труды Нижегородского государственного технического университета им. Р.Е. Алексеева No 2(87)
УДК 681.3.513
Е.А. Никулин
МОДЕРНИЗАЦИЯ АЛГОРИТМА КОНТРОЛИРУЕМОЙ
ТРИАНГУЛЯЦИИ ПОЛИГОНОВ
Нижегородский государственный технический университет им. Р.Е. Алексеева
Совершенствуется итерационный алгоритм разрезания произвольного полигона на множество тре-
угольников с длинами сторон, не превышающими заданного значения.
Ключевые слова: полигон, триангуляция, разрезание, итерация.
Операция разрезания полигонов (многоугольников) широко распространена в различ-
ных прикладных программах и системах автоматизированного проектирования. Она исполь-
зуется в следующих целях:
 для разделения полигона на независимые фрагменты, с которыми далее будут выпол-
няться индивидуальные преобразования;
 замены невыпуклого полигона объединением выпуклых фрагментов, с которыми все
тестовые и расчетные задачи выполняются проще и быстрее;
 представления произвольных полигонов объединением простейших выпуклых фигур –
треугольников – с целью унификации и максимального упрощения большинства по-
лигональных операций.
Под триангуляцией будем понимать операцию разрезания произвольного, возможно,
невыпуклого полигона на треугольники. Ее можно выполнить как рекурсивным [1], так и
итерационным методом: поочередным отрезанием выступающих треугольников диагоналя-
ми до тех пор, пока не останется последний треугольник. Общий недостаток этих методов
состоит в неконтролируемой возможности получения разновеликих и чересчур вытянутых
треугольников.
В [1] разработан метод триангуляции произвольного полигона P=p1p2...pnp1 с кон-
тролируемыми размерами отрезаемых треугольников, у которых длины сторон не превы-
шают заданного габаритного параметра h. Идея метода, эскизно и без детализации намечен-
ная в [2], заключается в циклическом поиске у полигона выпуклой вершины pm с минималь-
ным внутренним углом (рис. 1)
  m  min i  , где i = (pi - 1 - pi , pi + 1 - pi)
(1)
i1, n 
и последующем отрезании от него треугольников с длинами сторон, не превышающими h.
h
pn
...
W
P
1
p1
pm+1
p2
...
n
b
m
pm
a
V
pm–1
Рис. 1
Модернизация разработанного в [1] алгоритма заключается в замене цикла перебора
вершин полигона P=p1p2...pnp1 их левым циклическим сдвигом с помощью функции
© Никулин Е.А., 2011.
Информатика и системы управления
63
LCShift(P) = p2p3...pnp1p2,
(2)
возвращающей список вершин полигона P, ограниченный вершиной p2. Благодаря этому ал-
горитм работает с фиксированным индексом m = 1. Поиск минимального выпуклого угла те-
перь основан на n циклических сдвигах P = LCShift(P) и запоминании конфигурации нового
полигона P при каждом уменьшении модуля его первого угла  = |1|.
В эффективной контролируемой триангуляции число отрезанных треугольников
должно быть минимальным, а их форма близка к правильной с длинами сторон, максимально
близкими к h, и внутренними углами, близкими к 60. Для реализации этих требований бу-
дем определять число треугольников, отрезаемых от угла pnp1p2, в зависимости от величины
 (рис. 2): один при   60, два при 60 <   120 либо три при 120 <  < 180.
pn
60   120
с
p2
  60
pn
b
a
v

w
120   180
p2
b
a
w
v

p1
p1
e
d

pn a
v
w b
p1
Рис. 2
Выпустим из точки p1 в направлении вершин pn и p1 векторы v и w с длинами |v|  h и
|w|  h. Расположим на концах векторов точки a и b, а между ними равномерно распределим
точки c, d и e. Равномерность достигается помощью параметрической функции
uv,w,,   r   v R    ,
(3)
где R() — матрица вращения на угол , а v  v v означает нормировку вектора v. Функция
(3) возвращает вектор, длина которого r() = (1 - ) |v| +  |w| и угол  = - отклонения от
вектора v являются линейными функциями параметра . При изменении последнего в интер-
вале 0, 1 вектор u переходит из положения v в положение w, равномерно увеличивая
угол от 0 до  и длину от |v| до |w|. Сопоставим глобальному направлению обхода вершин
полигона P индикатор D  {1, -1}, возвращаемый функцией dir_test(P) из [1]. Тогда вершины
отрезаемых треугольников будут расположены в следующих точках:
a = p1 + v, b = p1 + w, (4а)
с = p1 + u(v,w,0.5,D), (4б)
d = p1 + u(v,w,1/3,D),
e = p1 + u(v,w,2/3,D).
(4в)
Отрезанные треугольники добавляются в список треугольников LT, предварительно
инициализированный пустым, а оставшаяся часть полигона поступает на следующую итера-
цию разрезания. Для недопущения излишнего дробления и уменьшения общего числа тре-
угольников целесообразно по достижении расстояния |a - b|  h отрезать всегда один тре-
угольник p1bap1 независимо от величины угла . Так как при этом |a - p1|  h и |b - p1|  h, то
он удовлетворяет габаритному ограничению и не нуждается в разрезании на два или три.
p2
64
Труды Нижегородского государственного технического университета им. Р.Е. Алексеева No 2(87)
В зависимости от формы и размеров полигона возможны ситуации (рис. 3), когда от-
резок ab или полилинии aсb, adeb пересекают другие ребра полигона, либо вычисленные по
(4) точки c, d или e оказываются за его пределами. В результате новый полигон перестает
быть частью старого. Он становится самопересекающимся и может инвертировать направле-
ние обхода. Понятно, что дальнейшая триангуляция такого полигона невозможна.
h
h
c
a
v
v
c

p1
a

w
b
p1
w
b
Рис. 3
Предлагается следующее решение этой проблемы. Перед отрезанием треугольников
сохраним копии полигона Q = P и списка отрезанных треугольников LQ = LT, а после отре-
зания проверим новый полигон P на самопересечение или самокасание тестом self_test, оп-
ределенным в [1]. Он возвращает число 1, если полигон имеет хотя бы одну пару пересе-
кающихся либо касающихся несмежных ребер. При self_test(P) = 1 либо dir_test(P) ≠ D вос-
становим сохраненные в Q и LQ данные, уменьшим в (3) длины векторов v и w, после чего
будем отрезать треугольники с новыми вершинами (4) до тех пор, пока полигон P не пере-
станет самопересекаться или изменять направление обхода.
На рис. 4 построена блок-схема алгоритма contri_poly(P, h) контролируемой триангу-
ляции полигона P с габаритным параметром h. В алгоритме используется несколько вспомо-
гательных функций, определенных в [1]:
 size(P) — вычисляет размер полигона P, возвращая число его сторон n;
 min_poly(P) — удаляет из полигона P кратные и коллинеарные вершины;
 ang(V,W) — возвращает минимальный алгебраический угол между векторами V и W.
Работа алгоритма начинается с инициализации пустого списка LT = , предназначен-
ного для хранения отрезанных треугольников, и вычисления индикатора направления обхода
D = dir_test(P), необходимого в (4), для отбора выпуклых углов по условию D1 < 0 и обна-
ружения инверсии направления полигона P после недопустимого отрезания (рис. 3).
Дальнейший процесс выполняется циклически до отрезания последнего треугольника.
После каждого отрезания полигон изменяет свою конфигурацию, число вершин n и их спи-
сок P = p1p2...pnp1.
Рассмотрим действия, выполняемые в одном цикле алгоритма.
Шаг 1. Зафиксируем число n = size(P) сторон минимального полигона
P = min_poly(P), сохраним его копию Q = P и установим начальное значение угла  = .
Шаг 2. В цикле i  1, n вычисляем внутренний угол 1 = ang(qn – q1, q2 – q1) при пер-
вой вершине полигона Q = q1...qnq1. Если он выпукл (D1 < 0) и минимален (|1| < ), то за-
поминаем текущий минимум  = |1| и полигон P = Q. Далее выполняется циклический
сдвиг полигона Q = LCShift(Q).
Теперь разместим на сторонах угла pnp1p2 точки a и b, отстоящие от вершины p1 не
дальше, чем на расстояние h. Проще всего отложить от p1 отрезки длиной h, но тогда в конце
отрезания ребра, длина которого не кратна h, может остаться очень короткий отрезок, что, в
свою очередь, даст мелкий треугольник, длины сторон угла могут быть меньше h.
Процедура равномерного разбиения ребер полигона состоит из начальных установок
некоторых величин и их циклических настроек.
Информатика и системы управления




65
Шаг 3. Установочная фаза включает:
вычисление векторов сторон полигона p1pn и p1p2:
V = pn – p1, W = p2 – p1;
расчет целых кратностей длин сторон к числу h:
V
W
kv    , kw  
;
h
 h 
 


расчет целой кратности угла  к углу 60:
3
k  ;
  
 
сохранение копий полигона и списка треугольников:
Q = P, LQ = LT.
contri_poly(P,h)
LT=, D=dir_test(P)
1
P=min_poly(P), Q=P
n=size(P), =
3
2
i=1 ... n
end
=ang(qn–q1, q2–q1)
>0

V  p n  p1 , W  p 2  p1
V
W
3
k v   , k w  
, k  
h
 h 
 
 
 


Q  P, LQ  LT
4
D
7
v  V kv , w  W kw
a  p1  v, b  p1  w
Lp  b  p 2 p n  a
||
=||, P=Q
5
h
Q=LCShift(Q)
kv++, kw++
P=Q, LT=LQ
|a–b|
1
k
d  p1  u v,w,1 3, D 
e  p1  u v,w,2 3, D 
p1dap1  LT
p1edp1  LT
p1bep1  LT
P  a  d  e  Lp
3
c  p1  u v,w,1 2, D 
p1cap1  LT
p1bcp1  LT
P  a  c  Lp
p1bap1  LT
P  a  Lp
size(P)
>2
6
Возврат LT
self_test(P) 
D
1
dir_test(P) –D
Рис. 4
Шаг 4. Циклическая фаза разбиения ребер p1pn и p1p2 включает:
 вычисление векторов с длинами, не превышающими значения h:
V
W
v , w  ;
kv
kw
 вычисление по (4а) вершин треугольников, лежащих на смежных с p1 ребрах:
66
Труды Нижегородского государственного технического университета им. Р.Е. Алексеева No 2(87)
a = p1 + v, b = p1 + w;
 формирование списка некратных вершин полилинии, проходящей между точками b и
a с учетом возможного совпадения точек b = p2 и a = pn:
Lp  b  p 2 p n  a .
(5а)
В программировании логические объединения можно заменить конкатенациями (со-
единениями) с проверками совпадений точек, возникающих при kw = 1 или kv = 1:
 Lp  p 2 p 3p n ;

 Lp  if k w 1, Lp , b  Lp ;
 Lp  if k v 1, Lp , Lp  a.

(5б)
Шаг 5. В зависимости от длины отрезка ab и коэффициента k, вычисленного на шаге 3,
возможны три варианта отрезания треугольников и формирования списка вершин нового по-
лигона P (см. рис. 2):
 при |a - b | < h либо k = 1, т. е.   60, добавляем в список LT один треугольник
p1bap1, а новый полигон P формируем конкатенацией точки a и списка Lp, получен-
ного в (4). После добавления в LT последнего отрезанного треугольника полигон вы-
рождается в двунаправленный отрезок P = p1p2p1. Поэтому по условию size(P) < 3 ал-
горитм заканчивает работу и возвращает список LT с отрезанными треугольниками;
 при k = 2, т. е. 60 <   120, вычисляем по (4б) точку c, добавляем в LT два треугольника
p1cap1 и p1bcp1, а полигон P формируем конкатенацией точек a, c и списка Lp;
 при k = 3, т. е. 120 <  < 180, вычисляем по (4в) точки d и e, добавляем в список LT
три треугольника p1dap1, p1edp1 и p1bep1, а полигон P формируем конкатенацией то-
чек a, d, e и списка Lp.
Шаг 6. Проверяем самопересечение нового полигона P:
s = self_test(P).
При s = 0 и dir_test(P) = D переходим на шаг 1.
Шаг 7. В противном случае:
 инкрементируем коэффициенты разбиения ребер:
kv++, kw++;
 восстанавливаем копии полигона и списка треугольников:
P = Q, LT = LQ;
 переходим на шаг 4.
По окончании все возвращенные в списке LT треугольники имеют такое же направ-
ление обхода, что и у исходного полигона P. Это обеспечивается порядком следования вер-
шин треугольников, добавляемых в LT на шаге 5.
Проиллюстрируем работу алгоритма контролируемой триангуляции двумя сериями
примеров. В первой серии на рис. 5 один и тот же полигон разрезан при разных значениях h
на 714, 166, 49 и 10 треугольников. Порядок отрезания треугольников от наименьшего вы-
пуклого угла полигона можно проследить на двух последних рисунках.
y1
h=0.5
 pLT1
 PT 
h=1
 PT 
y0
x0
 pLT0   PT0
7
1
 PT 
y0
x1
x0
 pLT0   PT0
( x0 x1 y0 y1 )  ( 0.1 10.9
49 2
48
h=2
9
 
1
y0
x0
x1
 pLT0   PT0
y0
5
8
 
Рис. 5
0.1 10.9 ( x0
)
10
h=10
2
3 10
47
46 45 43 42 38
44 41
37 36

T 1
40 39
34 32 pL
35
33
16 1
31 30PT
3
5
29
6
25 26
28
8
9
27
10 14 15 21 22 24
20
23
11 12
19
18 4
13
17
1
 pLT1
 pLT1
1
y1
y1
y1
P 
4
5
7
6
1
x1
x0
 pLT0   PT0
x1
x1 y0 y1 )  ( 0.1 10.9 0.1 10.9 ( x0 x1 y0 y1 )  ( 0.1 10.9 0.1 10.9 )
)
3 9 7
1 1 2
Информатика и системы управления
67
Отметим, что при задании параметра h заведомо бóльшим габаритов полигона разме-
ры отрезаемых треугольников ограничиваются лишь длинами его ребер.
Таким образом, функцию contri_poly можно использовать для разрезания полигона
диагоналями на максимально крупные треугольники, что иллюстрируется на рис. 5 решени-
ем со значением габаритного параметра h = 10.
Во второй серии примеров триангуляции подвергались два случайных полигона, сгене-
рированных алгоритмом rpoly из [1], и один регулярный полигон с внутренним отверстием
(рис. 6). Последняя конфигурация требует дополнительной подготовки данных: нужно соеди-
нить внешний и внутренний контуры по диагонали двумя ребрами для получения одного замк-
нутого контура. Во избежание самокасания полигона эти ребра следует отодвинуть друг от дру-
га на малое расстояние путем соответствующего изменения координат соединяемых вершин
внешнего и внутреннего контуров. Направление обхода внутреннего контура должно быть про-
тивоположным направлению обхода внешнего. Если у полигона несколько внутренних отвер-
стий, то все они должны быть соединены дополнительными ребрами в один D-ориентированный
контур, где D – индикатор направления обхода внешнего контура полигона.
y1
y1
h
y1
10
10
y1
5
5
h 10
10
h
5
 pLT1  pLT1
 PT1  PT1
 pLT1
0
 PT1
0
10
10
0
0
10
5
5
 PT1
10
10
0
 pLT1
0
h
0
5
0
5
0
0
5
5
0
5
y0
x0
 pLT0   PT0
y0 10
x110
x0
5
y0
5
0
0
 pLT   PT
0
5
Рис. 6
x1
x0
0
y0
 pLT0   PT0
 5.627  8.397  9.914
0
5
x0
x1
5
T
T
8.0450 7.1010 3.83
pL    P
3.95 3.911 1.568
10
x1
1.533 2.504
 4.501   8.291 3.95 3.9
4.435 2.504  7.144 
1.768 3.011
  4.155
 3.68
P 
P 
P 
 2.649  5.189  6.564  8.355  5.553  1.29 0.016  0.36  0.383 9.635  8.958  0.016  0
8.053 6.221 0.603  1.846 0
0
1.557 4.558
 3.948


Выводы
Результатом проведенного исследования является алгоритм разрезания произвольного
полигона, автоматизирующий процесс изготовления широкой номенклатуры географических
карт. Эта способность разработанного алгоритма решать задачу триангуляции полигона диа-
гоналями, несомненно, повышает его универсальность и полезность.
Библиографический список
1. Никулин, Е.А. Компьютерная геометрия и алгоритмы машинной графики: учеб. пособие для
вузов / Е.А. Никулин. – СПб.: БХВ-Петербург, 2005. − 560 с.
2. Математика и САПР: [пер. с франц.]; В 2-х кн. Кн. 1 / П. Шенен [и др.] – М.: Мир, 1988.
− 204 с.
Дата поступления
в редакцию 28.04.2011
E.A Nikulin
MODERNIZATION OF THE ALGORITHM OF MANAGED
POLYGON TRIANGULATION
This article describes an improvement of iterational algorithm of cutting an arbitrary polygon in the set
of triangles with a limited upper-bound length of their edges.

