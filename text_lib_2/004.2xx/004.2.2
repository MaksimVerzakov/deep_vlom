УДК 004.2
ИССЛЕДОВАНИЕ РЕСУРСОЕМКОСТИ ЗАДАЧИ АЭРОДИНАМИКИ МЕТОДОМ ПРОФИЛИРОВАНИЯ С ПОМОЩЬЮ СЧЕТЧИКОВ ЦЕНТРАЛЬНОГО
ПРОЦЕССОРА
К.С. Солнушкин
Санкт-Петербургский государственный политехнический университет, Россия
Проводится анализ вычислительного процесса численного моделирования обтекания
кузова автомобиля с учетом турбулентности в CAE-системе "FLUENT". Предложена
концептуальная модель вычислительного процесса, разбивающая его на отдельные стадии.
Методом профилировки определены потребности приложения в ресурсах ЭВМ и некоторые сопутствующие характеристики.
1. Введение
Существующие суперЭВМ эффективно применяются для решения задач аэрогидродинамики (Computational Fluid Dynamics, CFD). Вместе с тем, перед покупателями
компьютера возникает вопрос выбора такой конфигурации ЭВМ, которая обеспечивала
бы наилучшую производительность на задачах будущих пользователей.
Для ответа на этот вопрос необходимо знать производительность всех ЭВМ, которые предполагается сравнить, на типовых задачах пользователей, – в данном случае,
на задачах аэрогидродинамики. Однако у численных алгоритмов аэрогидродинамики
чрезвычайно широк спектр параметров: могут применяться различные методы дискретизации, модели турбулентности, параметры многосеточного метода, может присутствовать учет прочих явлений: химических реакций, теплопереноса и др. Кроме того, на
производительность существенно влияют и входные данные. Поэтому какой-либо единой типовой задачи аэрогидродинамики не существует.
Установлено (см. [2]), что широко распространенные тесты производительности,
например, "LINPACK", не могут предсказать производительность ЭВМ на задачах аэрогидродинамики (и многих других классах приложений). Иными словами, результаты
тестирования на "LINPACK" и производительность на CFD-коде слабо коррелированны.
Отсюда следует, что, имея результаты тестирования ЭВМ на "LINPACK", невозможно предсказать производительность данной ЭВМ на задачах вычислительной аэрогидродинамики. В той же работе предложено и объяснение данному факту: для теста
"LINPACK" 55 % инструкций центрального процессора (ЦП) – это операции с плавающей точкой, и лишь 30 % - это операции загрузки и сохранения данных в ОЗУ. В то же
время для типичных CFX-кодов количество операций с плавающей точкой составляет
всего 15-20 %, тогда как количество операций с ОЗУ достигает 30-50 %. Очевидно, что
тест "LINPACK" не может быть использован для прогнозирования производительности
ЭВМ на задачах аэрогидродинамики, поскольку он по-другому использует ресурсы
ЭВМ – ЦП и ОЗУ.
По-видимому, для описания производительности приложений на ЭВМ необходимо использовать результаты нескольких тестов, объединив их в единую композитную
метрику. В частности, в [2] предлагается использовать взвешенное гармоническое
среднее результатов тестов "LINPACK" и "STREAM". Весовые коэффициенты при
этом отражают потребности конкретного приложения в ресурсах ЭВМ.
2. Определение характеристик рабочей нагрузки
Важной задачей является определение потребностей приложения в каждом из видов ресурсов, которые предоставляет ЭВМ. Для сложных параллельных инженерных
приложений следует учитывать не только потребность в таких ресурсах, как ЦП и ОЗУ,
но и потребность в обменах по сети и в операциях ввода/вывода.
Определение характеристик приложения, в том числе его потребностей в ресурсах
ЭВМ, носит название определения характеристик рабочей нагрузки (англ. "workload
characterization"). Такими характеристиками могут быть, например, число машинных
инструкций, количество тактов ЦП, необходимое для выполнения приложения, количество промахов кэш-памяти в расчете на тысячу инструкций и т.д. Характеристики зависят от алгоритма и его входных данных и определяют производительность ЭВМ.
У теста "LINPACK" и CFD-кодов характеристики различаются, поэтому показатели производительности на этих двух типах приложений слабо коррелированны.
По результатам определения характеристик рабочей нагрузки составляется ее модель. Приложения со схожими характеристиками демонстрируют похожую производительность. Тогда из всего набора созданных человечеством тестов производительности
ЭВМ можно выбрать тот, который обладает схожими характеристиками с исследуемым
приложением. Затем можно использовать существующие результаты этого теста для
того, чтобы спрогнозировать производительность ЭВМ на исследуемом приложении
[3]. Можно также сконструировать новый тест производительности, максимально полно воспроизводящий производительность исследуемого приложения на различных
платформах за счет схожести характеристик. Такой тест может быть устроен значительно проще, чем исследуемое приложение, при этом время его работы будет меньше.
3. Профилирование вычислительного процесса численного моделирования
Итак, определение характеристик рабочей нагрузки – важная задача. В данной
статье рассмотрено определение характеристик процесса численного моделирования
обтекания кузова автомобиля методом конечных элементов с учетом турбулентности.
Количество элементов сетки составляет 3,6 млн. [1] Исследование проводится методом
профилирования с помощью счетчиков центрального процессора.
Как и в предыдущей работе [4], профилированию подвергнута CAE-система
"FLUENT". Это закрытый коммерческий продукт, характеристики которого сложно исследовать другим способом. Однако в отличие от предыдущей работы удалось получить характеристики отдельных частей вычислительного процесса.
Предлагается следующая концептуальная модель вычислительного процесса (см.
рисунок).
Начало
Итер. 1
Итер. 2
...
Итер. N
Окончание
Рис. 1. Концептуальная модель вычислительного процесса
Процесс вычислений начинается с загрузки данных в оперативную память (сетка
и начальное приближение заданы в файле). Далее одна за другой следуют итерации,
вплоть до достижения критерия сходимости или прерывания счета пользователем. Затем происходит выгрузка полученного решения из оперативной памяти во внешнюю
память.
Было проведено несколько сеансов профилировки, с количеством итераций от 5
до 25 с шагом в 5. Разница в показаниях счетчиков процессора между двумя соседними
сеансами профилировки относится, таким образом, к 5 итерациям. Отсюда были получены показания счетчиков в расчете на одну итерацию.
Было экспериментально установлено, что требования к ресурсам ЭВМ в расчете
на одну итерацию сохраняются постоянными в течение всех 25 итераций (коэффициент
вариации для показаний большинства счетчиков составил менее 1 %). Для контроля
была проведена профилировка при 50 итерациях, и этот эффект сохранился.
Одним из следствий является то, что увеличение количества итераций приведет к
предсказуемому линейному росту времени, затраченного на итерации. Отметим, что на
другой тестовой задаче (обтекание корпуса самолета с околозвуковой скоростью потока) такой эффект не наблюдался.
Зная показания счетчиков на весь расчет и на одну итерацию, а также количество
итераций, можно получить показания счетчиков на совокупную стадию загрузки исходных данных и сохранения результатов ("Начало" и "Окончание" на рисунке).
Результаты профилирования сведены в таблицу.
Таблица 1
Результаты профилирования вычислительного процесса
Код события
0x76
0x01
0xC0
0x00
Обозначение события
CPU_CLK_ UNHALTED
CYCLES_NO_FPU_OPS_
RETIRED
RETIRED_ INSTRUC
TIONS
DISPATCHED_FPU_ OPS
Код
маски
- 127239 577548
- 560498 564201
95216 41487
93597 31989
130617 65146
5391 3917
21054 6698
37427 13371
383302 162608
0 0
0 0
98932 39307
151231 66217
250163 105524
273526 278231
10332 5089
8908 4214
0x01
0x02
0x04
0x08
0x10
0x20
0x3F
0x01
0x02
0xCB
RETIRED_ MMX_FP_ INSTRUC TIONS
0x04
0x08
0x0F
0x40
0x41
0x42
DATA_ CACHE_
ACCESSES
DATA_ CACHE_ MISSES
DATA_ CACHE_ REFILLS_
FROM_L2_ OR_SYSTEM
Описание маски
Количество событий,
x105
На стадию
На 1 итезагрузрацию
ки/сохранен
ия
968592
845846
Add pipe ops
Multiply pipe
Store pipe ops
Add pipe load ops
Multiply pipe load ops
Store pipe load ops
All types of operations*
x87 instructions
Combined MMX &
3DNow instructions
Combined packed SSE
& SSE2 instructions
Combined packed scalar SSE & SSE2 instructions
All types of
instructions*
0x1E
All cache states except
Invalid
0x43
0x80
0x82
0x83
0xE0
0x6C
0x7E
0x7D
0x45
0x46
0xC2
0xC3
0xC8
0xC9
*
DATA_ CACHE_ REFILLS_
FROM_ SYSTEM
INSTRUC TION_ CACHE_
FETCHES
INSTRUC TION_ CACHE_
REFILLS_ FROM_L2
INSTRUC TION_ CACHE_
REFILLS_ FROM_ SYSTEM
DRAM_ ACCESSES
SYSTEM_ READ_
RESPONSES
L2_CACHE_MISS
REQUESTS_ TO_L2
L1_DTLB_ MISS_ AND_L2_
DTLB_HIT
L1_DTLB_ AND_L2_
DTLB_MISS
RETIRED_ BRANCH_ INSTRUC TIONS
RETIRED_ MISPRED_
BRANCH_ INSTRUC TIONS
RETIRED_ NEAR_ RETURNS
RETIRED_ NEAR_ RETURNS_ MISPRED
0x1F
All cache states
908
242564 
1407 239943
- ~0
- ~0
0x01 Page hit 3506 2757
0x02 Page miss 2057 1465
0x04 Page conflict 1265 1529
0x07 All types* 6828 5751
0x07 All types 5509 4166
0x04 TLB reload 37 115
0x04 TLB reload 173 330
- 10369 829
- 134 157
- 57345 81041
- 2277 3067
- 1172 4963
- 14 412
- значения для справки
Последние 4 строки таблицы относятся к статистике инструкций ветвления и передачи управления и являются новыми по сравнению с работой [4]. Как видно из этих
данных, в процессе проведения итераций примерно каждая десятая инструкция – это
инструкция ветвления. Ошибки предсказания составляют примерно 4 %. Количество
машинных инструкций в расчете на одну подпрограмму (см. событие 0xC8) составляет
около 478.
Примененный подход позволил проанализировать отдельные стадии вычислительного процесса и более четко выявить потребности приложения в ресурсах ЭВМ.
Список литературы
1. FLUENT. Exterior Flow Around a Passenger Sedan. [Электронный ресурс].– 2008.–
Режим доступа: http://www.fluent.com/software/fluent/fl5bench/flbench_6.3/problems/
fl5l2.htm
2. McCalpin, J. An Industry Perspective on Performance Characterization: Applications
vs Benchmarks // DOE/NSA Workshop on the Performance Characterization of Algorithms.–
July 17, 2001. http://www.cs.virginia.edu/~mccalpin/
3. Hoste K., Phansalkar A., Eeckhout L. et al. Performance Prediction Based on Inherent
Program Similarity // The Fifteenth International Conference on Parallel Architectures and
Compilation Techniques. – September 16-20, 2006. http://www.cs.virginia.edu/~pact2006/
program/pact2006/pact157-eeckhout1.pdf
4. Солнушкин, К.С. Исследование производительности ЭВМ на задаче аэродинамики методом профилирования с помощью счетчиков центрального процессора // Материалы конференции "Научный сервис в сети Интернет – 2008" (в печати)
http://konstantin.solnushkin.ru

 сети Интернет – 2008" (в печати)
http://konstantin.solnushkin.ru

