УДК 004.2
ЖАБИНА В.В.
ПАРАЛЛЕЛЬНОЕ ФОРМИРОВАНИЕ КОМАНД В ПОТОКОВЫХ СИСТЕМАХ
Предложен метод ускорения вычислений в системах, управляемых потоком данных, при реали-
зации алгоритмов с ветвлениями, основанный на динамическом формировании параллельных пото-
ков команд. Показана возможность идентификации слов акторов и данных на основе графа задачи в
процессе компиляции для потоковых систем с несколькими средами формирования команд.
Method of computation acceleration in data-flow systems for branching algorithms realization is pro-
posed. It is based on dynamic parallel instruction flows compilation. There is shown a possibility to identify
actor and data words during compilation on the base of task graph for data-flow systems with several instruc-
tion formation units.
Введение
При решении задач управления и модели-
рования в реальном времени возникает необ-
ходимость реализации вычислительных ал-
горитмов с мелкозернистой структурой. В
качестве примера таких алгоритмов можно
указать алгоритмы интерполяции функций,
расчета траектории объектов в многомерном
пространстве. Ускорения вычислений в этом
случае можно добиться распараллеливанием
вычислений на уровне операций, а также ап-
паратной реализацией операций. Время ре-
шения параллельных задач во многом опре-
деляется эффективностью распараллелива-
ния вычислений.
Большинство из современных технологий
параллельного программирования относятся
к средствам статического распараллеливания
процессов [1]. Задачи распараллеливания в
этом случае решаются на этапе разработки
программ. При статическом анализе алгори-
тмов не всегда удается выявить параллель-
ные ветви, то есть скрытый параллелизм, что
объясняется недостатком информации о ди-
намике процессов в системе.
Одним из перспективных подходов, поз-
воляющих устранить ряд недостатков стати-
ческого планирования, является разработка
средства динамического распараллеливания
вычислений. В этом случае назначение зада-
ний на вычислительные узлы осуществляет-
ся системой в процессе решения задач. Та-
кой подход дает возможность достичь боль-
шей степени параллелизма, так как позволя-
ет выявить параллельные ветви, которые во-
зникают непосредственно в процессе вычис-
лений.
Одним из подходов для динамического
распределения заданий между вычислитель-
ными узлами является использование модели
вычислений, управляемых потоком данных
(потоковой модели). Распределение опера-
ций между вычислительными узлами в этом
случае может быть реализовано автоматиче-
ски на аппаратном или микропрограммном
уровне.
Реализация данной модели вычислений
для реализации мелкозернистых алгоритмов
может быть обеспечена применением ПЛИС,
которые содержат вычислительные ядра, мо-
дули памяти и средства коммуникации. Ис-
пользование такой элементной базы и техно-
логии SoC (System on chip) дают возмож-
ность эффективной реализации параллель-
ных вычислений на уровне операций.
Поскольку динамическое распределение
заданий осуществляется средствами самой
системы, то важной задачей является уме-
ньшение непроизводительных расходов вре-
мени на этот процесс.
Методы организации вычислений, управ-
ляемых потоком данных
К одним из первых работ в области орга-
низации вычислительных систем, управляе-
мых потоком данных (потоковых систем),
можно отнести работы [2-6]. Имея структур-
ные особенности, такие системы используют
общую модель вычислений. Потоковые сис-
темы содержат несколько вычислительных
модулей (ВМ) (устройств обработки инфор-
мации) и среду формирования команд
(СФК), связанных коммуникационными
средствами (КС).
2
Параллельное формирование команд в потоковых системах
В системах, управляемых потоком дан-
ных, команды выполняются не в заданной
программой последовательности, а при на-
личии готовых данных (наличии всех опера-
ндов), то есть определяющим в данном слу-
чае является не порядок выполнения команд,
а доступность данных для команды.
Подготовка вычислений осуществляется
на основе графа, каждой i -й вершине кото-
рого соответствует операция (функция), а
каждой дуге – данные.
Операция для i -й вершины графа описы-
вается информационным словом, которое
называют актором (actor). Актор описывает-
ся кортежем
Ai = I i , Fi , N i , Ti ,
(1)
где I i – идентификатор (уникальное имя)
данного актора; Fi – функция преобразова-
ния данных (код операции); N i – имя актора,
для которого i -й актор подготавливает опе-
ранд, а Ti – совокупность признаков этого
операнда.
Акторы связаны между собой только по
данным. Каждой дуге графа соответствует
слово данных
Di = I i , Qi , N i , Ti ,
(2)
где Qi – значение операнда.
Из соответствующих элементов Ai и Di в
СФК формируется команда, которая выпол-
няется в свободном ВМ или помещается в
очередь.
Известны различные алгоритмы форми-
рования команд [2-5]. Для организации СФК
используется ассоциативная память или ее
эмуляция с применением других техничес-
ких средств.
Компиляторы позволяют автоматизиро-
вать подготовку акторов и данных, причем,
без учета конкретного числа ВМ в системе.
Если время формирования команд в СФК
меньше времени выполнения команд в ВМ,
то в разных ВМ одновременно могут выпол-
няться разные команды, за счет чего и дости-
гается распараллеливание операций. Совре-
менные технологии реализации ВМ, в том
числе, с использованием ПЛИС, позволяют
применять аппаратные методы ускорения
операций, в результате чего интенсивность
формирования команд в СФК становится не-
достаточной для загрузки нескольких ВМ
одновременно.
В связи с этим важной проблемой являет-
ся увеличение интенсивности потока гото-
вых команд с целью ускорения параллель-
ных вычислений.
Простое дублирование СФК приводит к
недостаткам, присущим статическим мето-
дам подготовки параллельных программ.
Программист должен предварительно разре-
зать граф задачи на подграфы, предопреде-
лить идентификаторы акторов и данных в
разных подграфах с учетом связи по данным
между ними.
Более эффективным является подход, ко-
торый позволяет автоматически формиро-
вать акторы и данные при наличии несколь-
ких СФК [6, 7]. Система содержит модули, в
состав которых входит СФК и ВМ. Модули
организуются в кольцевую структуру. Дан-
ные циркулируют в такой структуре в поис-
ках своего актора. Команды формируются в
разных СФК и выполняются в соответству-
ющих ВМ.
Недостатком такого подхода являются за-
траты времени на пересылку данных между
модулями системы. Кроме того, выход из
строя любого модуля приводит к неработос-
пособности всей системы, поскольку инфор-
мация передается последовательно от одного
модуля к другому.
В работе [8] предложен метод автомати-
ческого распределения акторов и данных
между несколькими СФК, позволяющий ав-
томатически формировать параллельные по-
токи команд. Однако указанный метод мо-
жет быть использован в случае, когда граф
задачи не имеет разветвлений потоков дан-
ных.
В данной работе предлагается метод па-
раллельного формирования потоков команд,
который не требует ручного вмешательства в
процесс назначения идентификаторов соот-
ветствия акторов и данных различным СФК
и может быть использован для алгоритмов, в
которых допускается разветвление потоков
данных.
Метод формирования параллельных по-
токов команд
Организация основных компонентов по-
токовой системы поясняется рис. 1. Система
может иметь произвольное число ВМ. Коли-
чество СФК должно быть равно k=2j, где
j=1,2,3...
Вісник НТУУ «КПІ» Інформатика, управління та обчислювальна техніка No50
Формирование акторов и данных осущес-
твляется на основе графа.
Модифицируем форматы объектов (1) и
(2). Формат акторов принимает следующий
вид
Ai =< M i , I i , Fi , K i , Li , Ti > ,
(3)
где Mi – идентификатор СФК (номер потока
команд); Ii – уникальное имя данного актора;
Fi – функция преобразования данных (код
операции); Ki – количество акторов, для ко-
торых i-й актор подготавливает операнд;
Li = <Ij,Mj> – список имен акторов Ij с иден-
тификаторами Mj, для которых i-й актор под-
готавливает операнд; Ti – тип данных.
Данные запишем в виде
Di =< Qi , N i , Li , Ti > ,
(4)
где Qi – значение операнда; Ni – количество
акторов, для которых передается данный
операнд.
Рис. 1. Структура потоковой системы
Для формирования потоков команд, то
есть нахождения значений идентификаторов
СФК M i , предлагается следующий алго-
ритм.
1. На основе исходного графа построить
матрицу смежности, показывающую связь
между акторами по данным. В качестве но-
меров строк и столбцов взять имена акторов
Ii. или их индексы i. Первому потоку прис-
воить идентификатор М0.
2. Для формирования параллельных по-
токов команд начать циклический просмотр
полученной матрицы. В каждом цикле от пе-
рвой до последней строки выполнять:
а) если текущая строка не содержит еди-
ничных элементов, перейти к следующей ис-
ходной строке;
3
б) если строка с индексом i содержит еди-
ничные элементы, то в качестве первого ак-
тора в потоке команд взять актор с именем Ii;
в) актор с именем, индекс которого равен
номеру столбца первого единичного элемен-
та в текущей строке, добавить в данный по-
ток команд, а все единичные элементы дан-
ного столбца обнулить;
г) перейти к строке, номер которой соот-
ветствует номеру столбца, определенного в
п. 2в;
д) если строка не содержит единичных
элементов, закончить формирование очеред-
ного потока команд и присвоить ему соот-
ветствующий идентификатор СФК (если по-
ток первый, то М0, в остальных случаях Мi+1,
где Мi – имя предыдущего потока); перейти к
следующей строке для формирования сле-
дующего потока команд;
е) если строка содержит единичные эле-
менты, то продолжить формирование теку-
щего потока.
3. Если в результате прохода матрицы в
ней остались единичные элементы, то про-
ход повторить с п. 2; если единичных элеме-
нтов нет, то выполнить п.4.
4. Составить список акторов Ii в соответс-
твии с форматом (3) и учетом связей, задан-
ных матрицей смежности, а также иденти-
фикаторов Мi.
5. Аналогичным образом составить спи-
сок данных Di.
При выполнении алгоритма реальное чис-
ло ВМ и СФК в системе не учитывается. В
результате выполнения алгоритма формиру-
ется максимально возможное число паралле-
льных потоков команд. Если в системе имее-
тся только одна СФК, то идентификаторы
M i системой игнорируется. При наличии
нескольких СФК, число которых выбирается
по формуле k = 2 j ( j = 1,2,3...) , реально бу-
дет формироваться столько потоков команд,
сколько СФК имеется в системе. При расп-
ределении объектов (акторов и данных) ме-
жду СФК учитываются только ]log 2 k [ мла-
дших разрядов двоичных кодов идентифика-
торов M j . Например, для множества иден-
тификаторов
{M 0 , M 1 , M 2 , M 3 , M 4 , M 5 }
соответственно
с
кодами
{000, 001, 010, 011,100,101} при наличии в си-
стеме двух СФК учитывается только один
младший разряд кодов, а при четырех СФК –
4
Параллельное формирование команд в потоковых системах
два младших разряда. Соответственно в сис-
теме будут формироваться два или четыре
потока команд.
Пример формирования параллельных
потоков команд
Формирование
параллельных потоков
команд рассмотрим на примере графа, пред-
ставленного на рис. 2.
На основе графа формируем матрицу
смежности, как показано в табл.1.
В соответствии с приведенным алгорит-
мом формируем параллельные потоки ко-
манд. При первом проходе матрицы получа-
ем последовательность команд
M0: 1-5-10-14-16-19-21-22.
В табл. 1 рамками отмечены первые зна-
чимые элементы в строках при первом про-
ходе матрицы. Затемненные единичные эле-
менты обнуляются при первом проходе.
При дальнейших проходах аналогично
получаем:
М1: 2-6-11-15-17-20;
М2: 3-7-12;
М3: 4-8-13-18.
D1
I1
D2
D4 
D3
I2
F1
F2
I3
D5
F3 II4
  12
На основе полученных данных описываем
каждый актор в соответствии с форматом
(3):
A1 =< M 0 , I1 , F1 ,2, I 5 , M 0 , Й , М 1 , T1 > ;
6
A2 =< M 1 , I 2 , F2 ,1, I 6 , M 1 , T2 > ;
A3 =< M 2 , I 3 , F3 ,3, I 6 , M 1 , I 7 , M 2 , I 8 , M 3 , T3 >;
A4 =< M 3 , I 4 , F4 ,3, I 7 , M 2 , I 8 , M 3 , I 9 , M 4 , T4 >;
A5 =< M 0 , I 5 , F5 ,1, I10 , M 0 , T5 > ;
A6 =< M 1 , I 6 , F6 ,2, I10 , M 0 , I11 , M 1 , T6 > ;
A7 =< M 2 , I 7 , F7 ,3, I10 , M 0 , I11 , M 1 , I12 , M 2 , T7 >;
A8 =< M 3 , I 8 , F8 ,2, I12 , M 2 , I13 , M 3 , T8 > ;
A9 =< M 4 , I 9 , F9 ,1, I13 , M 3 , T9 > ;
A10 =< M 0 , I10 , F10 ,2, I14 , M 0 , I16 , M 0 , T10 >;
A11 =< M 1 , I11 , F11 ,3, I14 , M 0 , I15 , M 1 , I17 , M 1 , T11 >;
A12 =< M 2 , I12 , F12 ,2, I14 , M 0 , I15 , M 1 , T12 >;
A13 =< M 3 , I13 , F13 ,2, I15 , M 1 , I18 , M 3 , T13 >;
A14 =< M 0 , I14 , F14 ,3, I16 , M 0 , I19 , M 0 , I17 , M 1 , T14 >;
A15 =< M 1 , I15 , F15 ,3, I17 , M 1 , I 20 , M 1 , I18 , M 3 , T15 >;
A16 =< M 0 , I16 , F16 ,1, I19 , M 0 , T16 >;
A17 =< M 1 , I17 , F17 ,3, I19 , M 0 , I 21 , M 0 , I 20 , M 1 , T17 >;
A18 =< M 3 , I18 , F18 ,1, I 20 , M 1 , T18 >;
D6
A19 =< M 0 , I19 , F19 ,1, I 21 , M 0 , T19 >;
F1
4
A20 =< M 1 , I 20 , F20 ,1, I 21 , M 0 , T20 >;
I5
I6
F5
I10
I7
F6
I11
F10
I14
I8
F7
I12
F11
I15
F14
I9
F8
I12
13
F12
F9
F13
F1
A21 =< M 0 , I 21 , F21 ,1, I 22 , M 0 , T21 >;
A22 =< M 0 , I 22 , F22 ,1, I 22 , M 0 , T22 > .
Описываем данные в соответствии с фо-
рматом (4):
D1 =< Q1 ,1, I1 , M 0 , T1 > ;
D2 =< Q2 ,1, I 1 , M 0 , T2 > ;
F15
D3 =< Q3 ,1, I 2 , M 1 , T3 >;
I16
I17
F16
I12
18
F17
F18
F1
D4 =< Q4 ,1, I 3 , M 2 , T4 >;
D5 =< Q5 ,2, I 3 , M 2 , I 4 , M 3 , T5 >;
I19
I20
F19
F20
D6 =< Q6 ,1, I 4 , M 3 , T6 > .
Выводы
I21 F21
I22 F22
Рис. 2. Граф задачи
Поскольку матрица смежности не обнуле-
на полностью, начинаем обход сначала и по-
лучаем последнюю строку потока команд
М4: 9.
Предложенный метод формирования па-
раллельных потоков команд в системах,
управляемых потоком данных, имеет ряд
преимуществ по сравнению с программным
управлением параллельными вычислениями.
Управляющие слова и данные могут быть
сформированы автоматически компилятором
на основе графа. Нет необходимости предва-
рительно учитывать число вычислителей в
системе и обеспечивать синхронизацию об-
мена данными между параллельными ветвя-
Вісник НТУУ «КПІ» Інформатика, управління та обчислювальна техніка No50
ми алгоритма. Динамическое распределение
операций позволяет выявить непосредствен-
но в процессе вычислений скрытый паралле-
лизм, связанный с различными длительнос-
тями обработки данных в различных ветвях
алгоритмов. Вычислительные модули могут
выполнять операции, относящиеся к различ-
ным задачам, в любой последовательности.
В связи с этим в системе могут одновремен-
но решаться независимые задачи, причем,
нет необходимости синхронизации выполне-
ния задач.
По сравнению с кольцевой организацией
потоковых систем предложенный метод поз-
5
воляет ускорить вычисления за счет сокра-
щения непроизводительных затрат времени
на последовательную пересылку данных ме-
жду модулями системы. Кроме того, это спо-
собствует повышению надежности систем.
По сравнению с известным методом фор-
мирования параллельных потоков команд
предложенный метод расширяет область
применения потоковых систем за счет реали-
зации алгоритмов с разветвлениями.
Все это повышается эффективность обра-
ботки данных в потоковых системах.
Табл. 1. Матрица смежности
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
2
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
3
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
4
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
5
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
6
1
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
7
0
0
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
8
0
0
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
9
0
0
0
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
10
0
0
0
0
1
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
11
0
0
0
0
0
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
12
0
0
0
0
0
0
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
13
0
0
0
0
0
0
0
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
14
0
0
0
0
0
0
0
0
0
1
1
1
0
0
0
0
0
0
0
0
0
0
15
0
0
0
0
0
0
0
0
0
0
1
1
1
0
0
0
0
0
0
0
0
0
16
0
0
0
0
0
0
0
0
0
1
0
0
0
1
0
0
0
0
0
0
0
0
17
0
0
0
0
0
0
0
0
0
0
1
0
0
1
1
0
0
0
0
0
0
0
18
0
0
0
0
0
0
0
0
0
0
0
0
1
0
1
0
0
0
0
0
0
0
19
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
1
1
0
0
0
0
0
20
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
1
1
0
0
0
0
21
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
1
1
0
0
22
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
Список литературы
1.
2.
3.
4.
5.
6.
Воеводин В. В., Воеводин Вл. В. Параллельные вычисления. – СПб.: БХВ-Петербург,
2004. – 608 с.
Dennis J. B., Missunas D. P. A preliminary architecture for basic data flow processor// Proc.
2nd Annual Symp. Comput. Stockholm, May 1975. N. Y. IEEE. – 1975. – P. 126 – 132.
Silva J.G.D., Wood J.V. Design of processing subsystems for Manchester data flow computer
// IEEE Proc. N.Y. – 1981. – Vol. 128, N 5. – P. 218 – 224.
Watson R., Guard J. A practical data flow computer // Computer. – 1982. – Vol. 15, N 2.– P.
51 – 57.
Hogenauer E.B., Newbold R.F. Inn Y.T. DDSP – a data flow computer for signal processing/
Proc. Int. Conf. Parall. Process. Ohio, August 1982. N.Y. // IEEE. – 1982. – P. 126 – 133.
Johnson D. Data flow machines threaten the program counter// Electronic Design. – 1980. –
N 22. – P. 255 – 258.
6
7.
8.
Параллельное формирование команд в потоковых системах
Функционально ориентированные процессоры / Водяхо А.Н., Смолов В.Б., Плюснин
В.У., Пузанков Д.В. / Под ред. В.Б.Смолова. – Л.: Машиностроение. Ленингр. отд-ние,
1988. – 224 с.
Жабина В.В. Повышение эффективности параллельной обработки данных на уровне
операций в потоковых системах // Вiсник Нацiонального технiчного унiверситету
України “Київський полiтехнiчний iнститут”, Iнформатика, управлiння та обчислю-
вальна технiка,: Зб. наук. пр. – К.: „ВЕК+”. – 2008. – No49. – С. 112-116.

