На правах рукописи
УДК 004.4
ШИРЯЕВ Максим Владимирович
МАТЕМАТИЧЕСКОЕ И ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПОВЫШЕНИЯ
ЖИВУЧЕСТИ УПРАВЛЯЮЩИХ МОДУЛЕЙ СИСТЕМ РЕАЛЬНОГО ВРЕМЕНИ
Специальность 05.13.11 – «Математическое и программное обеспечение
вычислительных машин, комплексов и компьютерных сетей»
АВТОРЕФЕРАТ
диссертации на соискание ученой степени
кандидата технических наук
Москва – 2011
Диссертация выполнена на кафедре «Персональные компьютерные системы» (ИТ-4)
Московский Государственный Университет Приборостроения и Информатики (МГУПИ)
Научный руководитель:
кандидат технических наук, профессор
Рощин Алексей Васильевич
Официальные оппоненты:
доктор технических наук, профессор
Дорри Манучер Хабибуллаевич
кандидат технических наук, доцент
Рязанова Наталья Юрьевна
Ведущая организация:
ОАО «Концерн «Моринформсистема –
«Агат» (г. Москва)
Защита диссертации состоится «14» июня 2011 г. в 12 часов на заседании диссертацион-
ного Совета No Д 212.119.02 Московского Государственного Университета Приборострое-
ния и Информатики по адресу: 107996, г. Москва, ул. Стромынка, д. 20.
С диссертацией можно ознакомиться в библиотеке МГУПИ.
Автореферат разослан «10» мая 2011 г.
Ученый секретарь
диссертационного Совета Д 212.119.02
кандидат технических наук, профессор
Зеленко Г.В.
2
ОБЩАЯ ХАРАКТЕРИСТИКА РАБОТЫ
Актуальность работы.
Анализ результатов функционирования современных вычислительных систем выяв-
ляет отставание программных методов повышения надежности вычислительных систем от
аппаратных. Это определяет необходимость совершенствования, как самих программных
средств, так и способов их реализации и применения. В настоящее время все чаще исполь-
зуются сложные вычислительные системы (ВС), работающие под управлением целевого
программного обеспечения в режиме реального времени. Целевое программное обеспе-
чение (ЦПО) реализует основные алгоритмы работы конкретного изделия в различных
условиях его применения.
Все более широкая область применения, а, следовательно, и спектр задач, выпол-
няемых ВС на базе операционных систем реального времени (ОСРВ), определяет ужесто-
чение требований к надежности функционирования вычислительных систем в целом и це-
левых программных средств, которыми они оснащены.
Проблемы достижения требуемой степени надежности функционирования вычисли-
тельных систем рассматривались в работах отечественных и зарубежных ученых Б. А. Го-
ловкина, А. В. Гордеева, В. В. Липаева, Г. Майерса и других авторов. Основными направ-
лениями в этих работах являются:
 изучение программных ошибок, выявление причин их вызывающих и последствий
их проявления;
 рассмотрение различных моделей оценки надежности вычислительной системы и ее
программного обеспечения;
 повышение надежности технических элементов ВС;
 классификация существующих способов повышения надежности программного
обеспечения и их применение.
Однако, наряду с глубокой проработкой отдельных направлений в проведенных ис-
следованиях, вопрос об использовании программной избыточности при построении ЦПО
вычислительных систем на базе операционных систем реального времени практически не
рассматривался.
Основными этапами проверки правильности функционирования ЦПО является так
называемые статическая и комплексная отладки. Статическая отладка проводится вне ре-
жима реального времени, т. е. без учета временных интервалов между запросами абонен-
тов, прерываниями, моментами поступления входных данных, выдачи управляющих воз-
действий и т. п. Основной ее целью является поиск и устранение ошибок в теле рабочих
программ. Для дальнейшего устранения программных ошибок применяется комплексная
отладка всего ЦПО, которая осуществляется уже в режиме реального времени. Тем не ме-
нее, ошибки в ЦПО остаются и после выполнения процесса отладки.
Между тем, использование программной избыточности позволяет исправлять сбои,
возникшие в процессе работы ЦПО. При этом результаты работы сбойного программного
модуля замещаются результатами функционирования исправного.
Условия функционирования вычислительных систем в режиме реального времени, а
также отсутствие четкого научно-методического аппарата применения метода повышения
надежности работы ЦПО путем добавления программной избыточности не позволяют ис-
пользовать ранее предложенные подходы к добавлению программной избыточности при
модернизации серийно освоенных или при разработке новых изделий на базе ОСРВ.
Всё ещё не в полной мере разрешено противоречие между возрастающими требова-
ниями к повышению надежности ЦПО вычислительных систем реального времени (ВСРВ)
и реальными показателями существующего ЦПО.
3
Эти обстоятельства определяют актуальность данной работы.
Целью диссертационной работы является повышение надежности работы целевого про-
граммного обеспечения вычислительных систем реального времени.
Научная задача исследования – совершенствование научно-методического аппарата разра-
ботки целевого программного обеспечения на этапе проектирования путем добавления
программной избыточности.
Для достижения поставленной цели в работе сформулированы и решены следующие
теоретические и практические задачи:
1. Проведен анализ методов повышения надежности работы ЦПО путем добавления
программной избыточности.
2. Предложены изменения, которые необходимо внести в технологический процесс
разработки ЦПО.
3. Разработан усовершенствованный метод повышения надежности работы функцио-
нального программного обеспечения путем добавления программной избыточности.
4. Создана методика управления целевыми программными модулями.
5. Разработана модель состояний ЦПО, учитывающая особенности использования
предлагаемого метода повышения надежности.
6. Обоснованы основные показатели для оценки влияния различных подходов к добав-
лению программной избыточности на живучесть комплекса ЦПО и эффективность
использования ресурсов ВС при реализации метода повышения надежности путем
добавления программной избыточности.
7. Проведено исследование влияния известных методов введения программной избы-
точности на надежность работы целевого программного обеспечения вычислитель-
ных систем реального времени и эффективность использования ЦПО ресурсов вы-
числительной системы.
8. Обоснованы предложения по применению метода повышения надежности путем до-
бавления программной избыточности при создании нового и модернизации сущест-
вующего целевого программного обеспечения.
Методы исследования.
Для решения поставленных задач использовались методы структурного анализа,
имитационного моделирования, матричного исчисления, теории множеств, статистического
анализа, теории графов, теории планирования экспериментов, теории оценивания и корре-
ляционного анализа.
На защиту выносятся:
1. Модель состояний ЦПО при использовании метода управления с критериальным
подключением модулей.
2. Методика управления целевыми программными модулями.
3. Метод повышения надежности работы ЦПО путем введения программной избыточ-
ности, включающий в себя усовершенствованный процесс разработки ЦПО.
Научную новизну работы составляют:
 модель состояний ЦПО для разработанного метода управления;
 методика выбора резервных программных модулей;
 метод управления с критериальным подключением целевых программных модулей.
4
Практическая значимость работы определяется:
 разработанным алгоритмом программной реализации метода управления с критери-
альным подключением резервных программных модулей;
 проведенными экспериментальными исследованиями по оценке влияния подходов к
добавлению программной избыточности на живучесть ЦПО;
 разработанными предложениями по применению метода управления с критериаль-
ным подключением резервных модулей.
Реализация и внедрение результатов работы:
Метод повышения надежности разрабатываемых и модернизируемых комплексов
целевого программного обеспечения на основе введения структурной избыточности, мо-
дель оценки надежности функционирования комплекса ЦПО, разработанного на основе
данного метода, методика выбора программных модулей, рекомендуемых для введения
избыточности были использованы в ОАО «Концерн «Моринформсимтема – «Агат» (г. Мо-
сква) при разработке и отладке функционального программного обеспечения в ходе ОКР
«Линкор» (акт от «20» января 2010 г.).
Методика выбора программных модулей, рекомендованных для добавления про-
граммной избыточности и модель состояний ЦПО при использовании метода повышения
надежности путем добавления программной избыточности были использованы в ЦНИИ
«Курс» (г. Москва) при разработке комплекса моделирования внешней обстановки в ходе
ОКР «Олимп» (акт от «26» января 2010 г.).
Апробация результатов работы.
Теоретические положения и практические результаты работы докладывались и обсу-
ждались на ежегодных научно-технических конференциях:
 «Вычислительные системы реального времени и цифровые устройства». ОАО
«Концерн «Моринформсистема – Агат». Москва, 2009 г.
 «VII молодежная научно-техническая конференция «Взгляд в будущее – 2009».
ОАО «ЦКБ МТ «Рубин». Санкт-Петербург, 2009 г.
 «Вычислительные системы реального времени и цифровые устройства». ОАО
«Концерн «Моринформсистема – Агат». Москва, 2010 г.
 «VIII молодежная научно-техническая конференция «Взгляд в будущее – 2010».
ОАО «ЦКБ МТ «Рубин». Санкт-Петербург, 2010 г.
 «II Российская научно-практическая конференция судостроителей «Единение науки
и практики». ЦНИИ им. акад. А.Н. Крылова. Санкт-Петербург, 2010 г.
 «XVI Макеевские чтения». ОАО «Концерн «Моринформсистема – Агат». Москва,
2010 г.
Публикации.
Результаты исследований по теме диссертации изложены в 7 опубликованных рабо-
тах, в том числе статья в журнале, включенном в перечень ведущих журналов и изданий
ВАК РФ.
Структура и объем диссертационной работы.
Диссертация состоит из введения, 3 глав, заключения и списка литературы из 115
наименований. Работа изложена на 128 страницах и содержит 44 рисунка и 10 таблиц.
5
СОДЕРЖАНИЕ РАБОТЫ
Во введении обоснована актуальность темы диссертационной работы, сформулиро-
ваны цель и задачи исследования, научная новизна и практическая ценность полученных
результатов, приведены сведения об использовании, реализации и апробации результатов
работы.
В первой главе проанализированы требования к вычислительным системам реаль-
ного времени (ВСРВ). Показано, что специфика требований к ним проявляется во всех ас-
пектах их применения: функциональных, эксплуатационных и конструктивных. При этом
уникального требования к ВСРВ не существует, специфика заключается не в наличии та-
кого требования, а в их совокупности. В то же время эта совокупность формирует инте-
гральное требование – обеспечение достоверности работы вычислительной системы,
включая устойчивость к сбоям при наличии большого количества дестабилизирующих
факторов, которые в большинстве своем носят случайный характер.
Целевое программное обеспечение вычислительных систем реального времени
имеет следующие основные особенности:
 решение задач в реальном времени;
 непосредственный обмен информацией с большим количеством внешних або-
нентов при одновременном решении основных функциональных задач;
 высокая программная устойчивость при большой (сотни и тысячи часов) про-
должительности непрерывной работы и высокие требования к достоверности
управляющих воздействий при наличии различных возмущений.
Целевое программное обеспечение разбито на модули, привязанные к прерываниям
и синхронизированные между собой через систему приоритетов. Такое построение струк-
туры ЦПО наряду с применением специализированной ЦВМ сокращает время на обработ-
ку информации.
Благодаря данной организации функциональное программное обеспечение позволя-
ет осуществлять управление потоками данных от абонентов и, наоборот, к абонентам с
помощью системы прерываний (рисунок 1).
Рисунок 1 – Организация взаимодействия компонентов системы прерываний
Обозначение на рисунке: ПОП – программа обработки прерывания; ПГП – приоритетная
группа программ; Д1 – диспетчер инициализации ПГП; Д2 – диспетчер гашения заявки и
восстановления начального состояния выбранной ПГП.
Под программным модулем понимается наименьшая совокупность команд, локаль-
ных переменных и констант, предназначенных для получения конкретного результата на
основе поступающей информации.
6
Для анализа ЦПО в части возможности использования метода повышения надежно-
сти путем добавления программной избыточности требуется группа показателей использо-
вания ресурсов вычислительной системы, таких как:
 относительный резерв времени реализации функции ∆tf;
 относительный резерв объема занимаемого программой адресного пространства па-
мяти ∆VПМ и объема памяти промежуточных данных программного модуля ∆VПД.
Анализ процесса разработки ЦПО свидетельствует о том, что создание высокопро-
изводительного и надежного программного обеспечения для вычислительных систем ре-
ального времени является трудоемким процессом, подчас более продолжительным, чем
разработка и изготовление самой аппаратуры. В свою очередь статистические данные по-
зволяют определить, что временные и экономические затраты на локализацию и исправле-
ние ошибок, внесенных в процессе разработки многократно возрастают в течение этапов
жизненного цикла программного обеспечения (рисунок 2).
10
9
8
7
6
5
4
3
2
1
0
Немодифицированное ЦПО
ЦПО содержащее избыточность
Рисунок 2 – Зависимость затрат на корректировку ошибок от этапов жизненного цикла
ЦПО
Многообразие типов ошибок вызывает необходимость изучения природы появления
ошибок при программировании. На основе анализа статистических данных, полученных
опытным путём в процессе отладки целевого программного обеспечения вычислительных
систем реального времени, в рамках данной главы, сформирован обобщённый конкретизи-
рованный перечень ошибок программирования ЦПО, который может оказать существен-
ную помощь разработчикам программного обеспечения при отладке программ, указывая
на природу возникновения и способ локализации ошибки.
Проведенный анализ существующих методов введения программной избыточности,
показал, что единая система показателей оценки надежности ЦПО отсутствует. Имеющие-
ся модели оценки надежности целевого программного обеспечения не учитывают всего
многообразия внутренних структур оцениваемых систем (аналитические модели), либо
требуют больших временных и стоимостных затрат на проведение процесса сбора стати-
стической информации (статистические, эмпирические модели).
Из вышесказанного следует цель работы – повышение надежности целевого про-
граммного обеспечения вычислительных систем реального времени, и соответствующие
задачи:
 разработка усовершенствованного процесса проектирования ЦПО;
 разработка обобщенной структуры метода повышения надежности работы ЦПО пу-
тем добавления программной избыточности;
7
 обоснование методики локализации последствий программного сбоя и подхода к
добавлению программной избыточности.
Вторая глава посвящена совершенствованию метода повышения надежности работы
ЦПО путем введения программной избыточности.
Использование программной избыточности, как инструмента повышения надежно-
сти работы целевого программного обеспечения осложнено не только увеличением допол-
нительных затрат ресурсов вычислительной системы но и повышением стоимости разра-
ботки программного обеспечения. Эти факты требуют избирательного использования про-
цесса добавления программной избыточности. Однако, избирательность этого процесса
требует наличия классификации программных модулей по степени важности выполняемой
задачи. Используемые методики экспертного опроса приводят к рассогласованию субъек-
тивных оценочных значений при опросе различных групп экспертов. Анализ целевого про-
граммного обеспечения, состоящего из большого количества программных модулей (более
30) приводит также к невозможности прямого использования методов экспертного опроса,
и требует группирования программных модулей по различным признакам.
Соответственно, использование программной избыточности для повышения надеж-
ности работы целевого программного обеспечения требуется для программных модулей с
наименьшими показателями надежности. Однако, получение информации такого рода
возможно только после завершения процесса отладки. Приняв все вышеизложенные фак-
ты, повышение надежности работы ЦПО путем добавления программной избыточности
предлагается проводить после завершения процесса статической отладки. Это определено
необходимостью сбора статистической информации о надежности отдельных программ-
ных модулей и целевого программного обеспечения в целом. Также на данном этапе соби-
рается информация об использовании программными модулями ресурсов вычислительной
системы.
Как указывалось в первой главе, существующие методы добавления программной
избыточности неприменимы в связи с жесткими ресурсными ограничениями, определяе-
мыми режимами функционирования изделий. По этой причине требуется обоснование ме-
тодики локализации последствий программного сбоя, которая будет являться основой для
предлагаемого метода введения программной избыточности.
Предлагаемый метод введения программной избыточности основан на методике ис-
пользования явных признаков сбоя программного модуля (рисунок 3).
Рисунок 3 – Усовершенствованная схема управления целевыми программными модулями
8
В свою очередь, для обоснования предлагаемого метода необходимо оценить влия-
ние используемой методики локализации последствий программной ошибки и количества
резервных программных модулей N на средний прирост времени реализации функции t f .
Для проведения оценки введем следующие допущения:
 время выполнения целевых модулей априорно одинаково;
 время функционирования целевых программных модулей несоизмеримо больше
времени проверки достоверности полученных результатов (за исключением методи-
ки контрольных функций, при использовании которой возможно наличие достаточ-
но большого объема необходимых вычислений).
Использование предложенного метода приводит к усложнению временной последо-
вательности функционирования ЦПО (рисунок 4) вследствие вероятностного характера
выполнения резервных программных модулей в условиях ограниченных ресурсов вычис-
лительной системы. Значение среднего прироста времени реализации функции:
N
t f ( N )   ( pот ( M i 1 )  ti  tвыб )
(1)
i 1
где: pот ( M i 1 ) – вероятность выполнения i-го программного модуля, N – количество ре-
зервных программных модулей, ti – время функционирования i-го резервного модуля, tвыб –
время выбора достоверного решения.
t
t выб
t f(1)
t выб
t1
t f(2)
...
t2
Рисунок 4 – Временная последовательность функционирования ЦПО при использовании
методики критериального подключения программных модулей
Предложенная методика критериального подключения программных модулей, по-
зволяющая более экономно использовать временной ресурс, основана на вероятностном
характере необходимости повторного запуска целевого модуля.
Применение любого из имеющихся методов добавления программной избыточности
осложнено постоянным повышением требований к ресурсам, как временным, так и физи-
ческим.
Соответственно, как при выборе модулей, подлежащих диспетчеризации, так и при
выборе метода добавления программной избыточности, используемого для данного моду-
ля, необходимо учитывать уровень отводимых и уже используемых модулем ресурсов, а
также потребность в повышении надежности конкретного модуля. Методика управления
программными модулями, рекомендуемыми для реализации программной избыточности,
позволяет учесть указанные ограничения. Она состоит из нескольких этапов.
На первом этапе выполняется построение матрицы R наличия резерва отведенных
ресурсов для всех модулей ЦПО. Значения элементов матрицы соответствуют относитель-
ному наличию временного ресурса t fi , относительному наличию ресурса объема зани-
маемого программой адресного пространства δVПМi, относительному наличию ресурса
объема промежуточных данных программного модуля δVПДi, максимальной производи-
9
тельности системы Ri и показателю наличия контрольных взаимосвязей i для каждого
программного модуля.
Параметр i равен количеству программных модулей, с которыми i-й программный
модуль находится в верификационной зависимости.
Затем строится матрица V соответствия подходов к реализации программной избы-
точности и программных модулей ЦПО. Результаты расчета значений элементов данной
матрицы указывают на возможность использования различных методов добавления про-
граммной избыточности и на то, какое значение параметра N при этом может быть приме-
нено для каждого программного модуля.
Элементы матрицы V, рассчитываются по следующим формулам (2–5):
 (2)
   
      
          
            r1i 
            r2i 
            r3i 
            v1i  min{  
                ,  
                    ,  
                        } , 
                           2n(1  r1i )   2n(1 - r2i )   2n(1  r3i )  
 r   r   r  (3)
            v 2i  sign(  1i    2i    3i  ) , 
                              1 - r1i  1 - r2i  1 - r3i  
r1j (4)
 
  0, r4i  1 - r 
      1j 
       
        , 
        v 3i   
            r1j 
            r , r  
                , r ,r  0 
                   4i 4i 1 - r1j 2i 3i 
                     
0, r1i  0 (5)
     
      . 
      v 4i   r3i 
          [ 
          ], r1i  0 
             1- r 
               
                3i 
где: vj,i – элементы матрицы соответствия, rj,i – элементы матрицы наличия ресурсов
системы R, j=[1..4], i=[1..M], n – целое, положительное число.
На следующем этапе (этапе анализа статистической информации) для каждого про-
граммного модуля рассчитывается удельное количество неустраненных отказов (6).
Причиной неустраненных отказов может быть как незафиксированные аппаратные
сбои, так и наличие программной ошибки, однако несовершенство используемых на дан-
ном этапе программно-инструментальных средств для проведения процесса разработки и
отладки программного обеспечения не позволяют выявить причину, ее вызывающую.
Данный показатель необходим для того, чтобы можно было формально представить
необходимость использования программной избыточности для данного программного мо-
дуля с учетом возможностей используемых программно-инструментальных средств ком-
плексной отладки.
N неустрi 
N неустрi
VПМi
,
(6)
где VПМi – объем i-го программного модуля,
N неустрi  N откi  N устрi ,
где: N откi – количество отказов i-го программного модуля, а N устрi
раненных отказов i-го программного модуля.
10
(7)
– количество уст-
На заключительном этапе (оценки допустимого количества неустраненных отказов)
происходит принятие решения о целесообразности применения дисциплин управления для
того или иного программного модуля.
Выбор между положительным и отрицательным решением по рекомендации резер-
вирования конкретного программного модуля формально можно представить в следующем
виде:
N неустрi  N Комплексн. .
(8)
Согласно ранее проведенных исследований, значение показателя N Комплексн зависит
от применяющихся программно-инструментальных средств проведения процесса разра-
ботки и отладки программного обеспечения. Соответственно, как одной из рекомендаций
по применению метода повышения надежности программного обеспечения с критериаль-
ным подключением целевых программных модулей можно считать необходимость про-
гнозирования удельного количества устраняемых ошибок на единицу объема целевого
программного обеспечения при изменении применяемых программно-инструментальных
средств проведения отладки.
На данный момент возможен расчет этого показателя для уже существующих
средств автоматизации разработки программного обеспечения (DISKOP, Tornado, САРПО
«Сайвер») (рисунок 5).
 N Комплексн
0,007
0,006
0,005
0,004
0,003
0,002
0,001
0
DISKOP
TORNADO
САЙВЕР
Рисунок 5 – Зависимость удельного количества устраняемых ошибок на единицу
объема, от используемых программно-инструментальных средств разработки и отладки
целевого программного обеспечения
Также в рамках данной главы разработана модель состояний ЦПО при использова-
нии метода повышения надежности путем добавления программной избыточности с кри-
териальным подключением программных модулей.
При построении модели состояний ЦПО были введены следующие допущения:
 при построении ЦПО будет применено однократное резервирование (N = 1);
 методикой использования резервных программных модулей принята дисциплина
замены модуля (основной ПМ ↔ ПМ резервный);
 сбой двух программных модулей одновременно невозможен, вследствие того, что
одновременно возможно использование только одного модуля;
 в качестве интенсивностей сбоев программных модулей взяты средние значения для
каждой группы программ;
 интенсивности сбоев в основных и резервных модулях являются независимыми зна-
чениями;
11
 значения элементов таблиц соответствия K также усреднены и одинаковы для всех
программных модулей (имеется два значения: Koр – соответствие областей сбоя ос-
новного программного модуля резервному и Kрo – соответствие областей сбоя ре-
зервного программного модуля основному);
 зарезервированы не все программные модули ЦПО;
 для каждого модуля производится постоянный контроль правильности его функцио-
нирования, основанный на контроле времени выполнения модуля и корректности
использования памяти.
С учетом введенных ограничений, граф состояний ЦПО выглядит следующим обра-
зом (рисунок 6).
За работоспособные состояния ЦПО принимается совокупность состояний E+ с 0 по
3s, за неработоспособные – 3s+1, 3s+2 (совокупность состояний E–).
Рисунок 6 – Граф состояний ЦПО для метода повышения надежности путем добав-
ления программной избыточности с критериальным подключением модулей
На рисунке: 0 – полная работоспособность комплекса; 1, s – сбой в i-м количестве
основных модулей, выполнение функции резервными модулями; s  1,2s – использование
резервного программного модуля после сбоя в основном; 2s  1,3s – использование основ-
ного программного модуля после сбоя в резервном; 3s+1 – сбой в резервном модуле, нера-
ботоспособность системы, восстановление; 3s+2 – сбой в нерезервированном модуле, не-
работоспособность комплекса, восстановление; s – количество зарезервированных моду-
лей; m – количество незарезервированных модулей; λ – интенсивность сбоев в основном
модуле; μ – интенсивность сбоев в резервном модуле; β – интенсивность сбоев в незаре-
зервированном модуле; α – интенсивность восстановления системы; Kор – соответствие об-
ластей сбоя основного модуля резервному; Kро – соответствие областей сбоя резервного
модуля основному.
Приняв за показатель надежности функционирования ЦПО его вероятность безот-
казной работы pбо (c ) , можно получить искомое значение как сумму вероятностей множест-
ва работоспособных состояний E+:
12
3s
pбо ( c )   pi  1  p3 s 1  p3s  2
(9)
i 0
При включении в текущее состояние ЦПО параметра, указывающего на количество
вышедших из строя основных программных модулей будет выполнено условие отсутствия
последействия для Марковского процесса. Это позволит составить систему уравнений
Колмогорова и найти значения финальных вероятностей для каждого из состояний систе-
мы.
При рассмотрении данного графа получена следующая система уравнений Колмого-
рова:
 0  ( p 3 s  1  p 3 s  2 )   p 2 s  1 (1  K ро )  p 0 ( s   m  )

0 
0 




0 

0 
0 



0 
0 

0 


0 

0 



0 

p s  1 (1  K ор )  p 2 s  2 (1  K ро )  p 1 (( s  1 )   m    )
p s  2 (1  K ор )  p 2 s  3 (1  K ро )  p 2 (( s  2 )   m   2  )
p 2 s (1  K ор )  p s ( m   s  )
p 0 s  p s1
p 1 ( s  1)   p s  2
p s  1  p 2 s
p1   p 2 s 1
p2 2  p2s2
p s s  p3s
2s
K ор

p j  p 3 s  1
j  s 1
(10)
3s
K
ро

s
pj  m
j  2 s 1

p j  p 3 s  2
j0
Система уравнений (10) имеет решение, однако вывод аналитической зависимости
осложнен отсутствием данных об общем количестве и количестве резервируемых про-
граммных модулей.
В третьей главе приведены практические аспекты реализации основных теоретических
положений.
В процессе проведения эксперимента были выполнены следующие работы:
 разработаны модели целевого программного обеспечения, использующие различные
методы добавления программной избыточности, а так же модель их не использую-
щая;
 проведено тестирование моделей ЦПО;
 проведено сравнение полученных результатов и по результатам сравнения сделаны
выводы о влиянии методов повышения программной избыточности на живучесть
системы и на показатели эффективности использования ресурсов вычислительной
системы комплексом ЦПО.
13
Помимо этого была реализована методика добавления избыточности в целевое про-
граммное обеспечение, состоящая из четырех этапов:
 на первом этапе разрабатывались N версий четырех различных программных моду-
лей, и на основе различных методов добавления программной избыточности разра-
батывались модели ЦПО;
 на втором этапе проводилось тестирование моделей ЦПО, с использованием одина-
ковых наборов входных данных;
 на третьем этапе обобщалась полученная информация об итерационных сбоях с це-
лью обнаружения сбойных ситуаций, не выявленных каждым из используемых ме-
тодов;
 на четвертом этапе проведена сравнительная оценка значений показателей надежно-
сти ЦПО и эффективности использования ресурсов вычислительной системы при
реализации различных методов добавления программной избыточности и без них.
Вышеуказанные этапы были учтены в алгоритме реализации метода повышения на-
дежности
работы
ЦПО
путем
добавления
программной
избыточности
с критериальным подключением программных модулей, особенностями которого являют-
ся:
 реализация методики локализации последствий итерационного сбоя по явным при-
знакам;
 реализация методики использования резервных программных модулей с их заменой.
Для проведения эксперимента использовались полунатурные модели, представляю-
щие собой набор основных (ПМ1) и резервных программных модулей (ПМ2, ПМ3), мо-
дуль счетчика времени (МВ), функционирующие под управлением диспетчеров Д1, Д2
(рисунок 7). При функционировании данных моделей Диспетчер 2 реализует выполнение
методики локализации последствий сбоя, а Диспетчер 1 – методику использования резерв-
ных программных модулей.
Рисунок 7 – Используемые модели ЦПО,
реализующие подходы к добавлению программной избыточности:
а) N-версного программирования, контрольных функций,
б) дуального программирования, критериального подключения модулей
Расчет вероятности устранения сбоя i-й методикой локализации последствий итера-
ционного сбоя производился по следующей формуле:
Ns
pus.i 
N
j 1
us. ji
N us . ji
 N l . ji  N pr . ji
Ns
14
,
(11)
где N s – количество проведенных экспериментов; N us. ji – количество устраненных
сбоев в j-м эксперименте для i-й методики локализации последствий программной ошибки;
N l . ji – количество ложных сбоев в j-м эксперименте для i-й методики локализации послед-
ствий программной ошибки; N pr . ji – количество пропущенных сбоев в j-м эксперименте
для i-й методики локализации последствий программной ошибки.
Вероятность ложного сбоя рассчитывалась по формуле:
Ns
pl .i 
N
j 1
N l . ji
us. ji  N l . ji  N pr . ji
Ns
.
(12)
Для расчета вероятности пропуска сбоя использовалась формула:
Ns
p pr .i 
N
j 1
us . ji
N pr . ji
 N l . ji  N pr . ji
Ns
.
(13)
Экспериментальные исследования позволили провести оценку влияния различных
подходов к реализации программной избыточности на живучесть системы, оценить собст-
венно надежность ЦПО и показатели эффективности использования ресурсов вычисли-
тельной системы.
Для оценки эффективности применения предлагаемого метода введения программ-
ной избыточности относительно имеющегося уровня надежности функционального про-
граммного обеспечения, сравнивались значения вероятности безотказной работы, полу-
ченные с использованием предложенной модели со значениями вероятности безотказной
работы ЦПО, разработанного без него.
Сравнение производилось по следующей формуле:
Pбо 
Pбо( с )  Pбо ( без)
Pбо ( с )
 100% ,
(14)
где Pбо(с ) – вероятность безотказной работы ЦПО, создаваемого с использованием
предлагаемого метода, при бесконечном увеличении количества вызовов программных
моделей, а Pбо(без) – вероятность безотказной работы ЦПО, создаваемого без использования
предлагаемого метода, при бесконечном увеличении количества вызовов программных
моделей.
Построение модели состояний ЦПО, созданного без использования повышения на-
дежности путем добавления программной избыточности, проводилось при тех же допуще-
ниях, введенных при разработке модели состояний ЦПО при использовании метода повы-
шения надежности путем добавления программной избыточности с критериальным под-
ключением программных модулей.
На основе анализа процесса функционирования ЦПО, разработан следующий граф
состояний (рисунок 8).
При рассмотрении данного графа получена следующая система уравнений Колмого-
рова:
15
0  ( p1  p 2 )  p0 (s   m)

0  p 0 s  p1
0  p  m  p 
0
2

(15)
Рисунок 8 – Граф состояний ЦПО без применения метода повышения
надежности путем добавления программной избыточности
На рисунке: 0 – полная работоспособность ЦПО; 1 – сбой в основном модуле, нера-
ботоспособность системы, восстановление; 2 – сбой в нерезервированном модуле, нерабо-
тоспособность ЦПО, восстановление. Численные значения: s – количество основных мо-
дулей; m – количество незарезервированных модулей; λ – интенсивность сбоев в основном
модуле; β – интенсивность сбоев в незарезервированном модуле; α – интенсивность вос-
становления системы.
Заменив первое уравнение на нормированное, решим систему (15).
Выразим все значения вероятностей через p0 :
p0 s
;
(16)

p m
p2  0
.
(17)

где: p0,p1,p2 – вероятности нахождения системы в соответствующих областях.
Путем подстановки полученных результатов в нормированное уравнение получим
значение вероятности полной работоспособности комплекса ЦПО p0 :
p1 
p0 

.
  s   m
(18)
Следовательно, вероятность безотказной работы ЦПО без использования способа
повышения надежности путем добавления программной избыточности равна:
pбо ( без )  p0  1  p1  p 2 

.
  s   m
(19)
Аналогичное решение можно получить, используя предложенную модель состояний
ЦПО путем реализации метода повышения надежности и добавления программной избы-
точности с критериальным подключением программных модулей, и использованием нуле-
вых значений в количестве дублируемых программных модулей.
В ходе исследования распределения ресурсов вычислительной системы от исполь-
зуемой методики локализации последствий программной ошибки были получены аналити-
ческие зависимости для метода критериального подключения программных модулей.
Отличием метода с критериальным подключением программных модулей от N-
версного программирования является возможность использования меньшего количества
16
резервных модулей. Соответственно, аналитическая зависимость среднего прироста объе-
ма программных модулей ЦПО будет соответствовать (20).
VПМ  N  K изб  1 ,
где: N – общее количество модулей ЦПО, K изб 
(20)
Nд
– коэффициент избыточности
N
комплекса, N д – количество дублированных программных модулей.
Рисунок 9 – Зависимость объема ЦПО от характеристик метода с критериальным подклю-
чением программных модулей
Построение ЦПО при использовании критериального подключения программных мо-
дулей имеет определенную особенность. При работе комплекса не происходит сравнения
результатов функционирования основного модуля и резервного. Соответственно, прирост
объема промежуточных данных программного модуля ∆VПД равен разнице между объема-
ми памяти промежуточных данных, используемой основным модулем и максимальным
объемом памяти промежуточных данных, используемым резервным модулем. Данный
прирост имеет минимальное значение, поэтому его можно не учитывать. Соответственно:
VПД  1  const .
(21)
Проведенные экспериментальные исследования подтвердили гипотезы, выдвинутые
во второй главе относительно среднего прироста времени реализации функции t f . Ре-
зультаты эксперимента указали на более эффективное использование функциональным
программным обеспечением имеющегося временного ресурса вычислительной системы
при использовании метода критериального подключения программных модулей.
Однако необходимо отметить, что при использовании данного метода, одной из
проблем в проведенных экспериментальных исследованиях явилось определение последо-
вательности подключения программных модулей, в условиях отсутствия критериальных
характеристик модулей замещения, позволяющих производить ранжировние по уровню
значимости выполняемых целевых функций программных модулей путем декомпозиции
основной цели функционирования системы.
Данная задача была решена учетом размеров областей пересечения входных данных,
вызывающих сбои различных программных модулей с использованием матрицы K.
Численно элементы матрицы равны отношению размеров областей пересечения
множеств входных данных, вызывающих сбои i-го и j-го программных модулей NU U к
sb .i
sb . j
размеру i-й области NU , однако, так как истинные размеры этих областей обычно неиз-
sb . i
17
вестны, можно говорить только о прогнозируемых значениях данной матрицы, получен-
ные на основе анализа процесса отладки, равные:
kij 
где: NU
Тsb.i UТsb. j
N U Тsb . i UТsb . j
N Тsb .i  N U
 N Тus .i
NТ
,
(22)
– размеры областей пересечения множеств входных данных, вызы-
вающих сбои i-го и j-го программных модулей, полученные при тестировании; N Тsb.i – раз-
мер области входных данных, вызывающих сбой i-го программного модуля при тестиро-
вании; NU – полный размер области входных данных; NТ – размер области тестирования, а
N Тus.i – размер области входных данных, вызывающих сбои i-го программного модуля,
устраненные при тестировании.
Таким образом, матица K необходима для расстановки резервных программных мо-
дулей в последовательности, позволяющей в кратчайшие сроки предотвратить последствия
итерационного сбоя.
Помимо добавления резервных программных модулей, в структуру ЦПО необходи-
мо внести модули, реализующие методики локализации последствий итерационного сбоя и
использования резервных программных модулей.
Данные функции предлагается возложить на Диспетчер 1 и Диспетчер 2, как это бы-
ло реализовано при проведении экспериментальных исследований (рисунок 7).
Использование различных методов добавления программной избыточности на этапе
отладки программного обеспечения позволяет автоматизировать процесс локализации ите-
рационных сбоев, тем самым повышая живучесть систем реального времени.
В заключении сформулированы основные результаты работы.
Поставленная цель работы – повышение надежности работы целевого программного
обеспечения вычислительных систем реального времени – выполнена, и соответствующие
задачи решены:
1. Проведен анализ существующих методов добавления программной избыточности
целевого программного обеспечения, позволивший выявить основную сложность ис-
пользования данных методов – большая ресурсоемкость.
2. Предложен метод повышения надежности работы целевого программного обеспече-
ния путем реализации дисциплин управления, основанный на методике выявления
явных признаков итерационного сбоя. Применение данного метода при разработке
нового и модернизации существующего ЦПО позволило повысить вероятность без-
отказной работы на 3-6 %.
3. Разработана методика управления резервными целевыми программными модулями.
Особенностью данной методики является учет следующих факторов:
 наличие ресурсов вычислительной системы для каждого программного модуля
согласно его спецификации и статистической информации по их использованию;
 особенности используемых программно-инструментальных средств проведения
процесса статической отладки функционального программного обеспечения.
4. Разработана модель состояний ЦПО, использование которой позволяет получить
требуемые значения показателей надежности работы функционального программно-
го обеспечения, разрабатываемого с применением предлагаемого метода диспетчери-
зации с критериальным подключением резервных функциональных модулей. Данная
модель учитывает как структуру ЦПО, так и показатели надежности функциониро-
18
вания различных групп модулей, полученных на этапах статической отладки ре-
зервных программных модулей, разработанных с целью повышения программной
избыточности.
5. Обоснованы показатели влияния различных подходов к добавлению программной
избыточности на надежность ЦПО:
 вероятность устранения последствий сбоя программного модуля Pus;
 вероятность возникновения ложного сбоя программного модуля Pl;
 вероятность пропуска сбоя программного модуля Ppr;
 вероятность безотказной работы ЦПО;
 эффективность использования ресурсов вычислительной системы при использо-
вании метода повышения надежности путем введения программной избыточно-
сти:
 средний прирост времени реализации функции t f ;
 средний прирост объема используемого программным модулем адресного про-
странства ∆VПМ ;
 средний прирост объема используемого промежуточными данными программно-
го модуля адресного пространства ∆VПД.
6. Проведена оценка влияния методов введения программной избыточности на надеж-
ность работы целевого программного обеспечения вычислительных систем реально-
го времени и показатели эффективности использования функциональным программ-
ным обеспечением ресурсов вычислительной системы. Результаты эксперименталь-
ных исследований позволяют сделать вывод о более эффективном использовании ре-
сурсов (временного ресурса и объема адресного пространства используемого проме-
жуточными данными программного модуля).
7. Выработаны рекомендации по применению метода повышения надежности путем
добавления программной избыточности при создании нового и модернизации суще-
ствующего целевого программного обеспечения.
Полученные результаты можно характеризовать как научно-методический аппа-
рат применения метода управления с критериальным подключением программных мо-
дулей ЦПО вычислительных систем реального времени.
Основные теоретические и практические результаты работы использованы при соз-
дании и модернизации образцов техники имеющей различное функциональное назна-
чение.
СПИСОК РАБОТ, ОПУБЛИКОВАННЫХ ПО ТЕМЕ ДИССЕРТАЦИИ
1. Ширяев М.В. Основные этапы отладки программ в статическом режиме. // Мор-
ские интеллектуальные технологии: II научно-практическая конференция су-
достроителей. Единение науки и практики 2010. – Спб.: Изд-во "Научно-
исследовательский центр "Морские интеллектуальные технологии", 2011,
спецвыпуск. – 283с. – С.225-229.
2. Ширяев М.В., Харитонов М.В. Драйвер SCSI-адаптера БТ408(spаrc). // Свиде-
тельство о государственной регистрации программы для ЭВМ No2011610713,
2011.
3. Ширяев М.В. Анализ способов повышения структурной избыточности ЦПО в систе-
мах реального времени. // Вычислительные системы реального времени и цифровые
устройства. Научно-технический рецензируемый сборник /под ред. Е.С.Новикова –
19
4.
5.
6.
7.
8.
М.: Изд-во "Концерн "Моринформсистема-Агат", 2009. – 158с. Табл.8, Ил.100, Биб-
лиогр. 106 назв. – С.69-74.
Ширяев М.В. Методика выбора программных модулей, рекомендованных для реали-
зации программной избыточности. // Вычислительные системы реального времени и
цифровые устройства. Научно-технический рецензируемый сборник / под ред.
Е.С.Новикова – М.: Изд-во "Концерн "Моринформсистема-Агат", 2010. – 135с.
Табл.8, Ил.87, Библиогр. 112 назв. – С.110-116.
Ширяев М.В. Определение критических по точности блоков программы. // Про-
граммное и информационное обеспечение систем различного назначения на базе
персональных ЭВМ :Межвузовский сборник научных трудов / Под редакцией д.т.н.
профессора Михайлова Б.М. – М.: МГУПИ, 2010, выпуск 13. – 115с.: ил.ISBN 987-5-
8068-0462-5. – С.110-113.
Ширяев М.В. Проблемы надежности функционального программного обеспечения в
операционных системах реального времени. // Состояние, проблемы и перспективы
разработки корабельных информационно-управляющих комплексов. / Сборник док-
ладов научно-технической конференции. – М.: ОАО "Концерн "Моринформсистема-
Агат", 2009. – 244с. – С.217-221.
Ширяев М.В. Процесс разработки ЦПО с учетом программной избыточности. // Со-
стояние, проблемы и перспективы разработки корабельных информационно-
управляющих комплексов. / Сборник докладов научно-технической конференции. –
М.: ОАО "Концерн "Моринформсистема-Агат", 2010. – 340с. – С.293-297.
Ширяев М.В. Метод обеспечения достоверности и точности за счет введения избы-
точности в программы. // Материалы VIII молодежной научно-технической конфе-
ренции «Взгляд в будущее – 2010» / СПб.: ОАО «ЦКБ МТ «Рубин», 2010. – 488с. –
С.483-487.
20

