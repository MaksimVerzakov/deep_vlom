УДК 004.3.06
АЛЕКСАНДРОВ Д.А., БОРИСОВ С.П., ГУСЬКОВ А.А.
НАСТРОЙКА МАРШРУТИЗАЦИИ В СРЕДЕ LINUX
Данный доклад рассказывает о возможностях маршрутизации, и способах её
применения. Рассматриваются различные требования и различные подключения,
после чего вырабатывается алгоритм, подходящий для поставленной цели.
This report talks about capabilities of network routing and of the ways it can be used. In
order to achieve our goal, first we have to analyze what purpose our internet connection
serves, secondly choose a service provider, which fits our needs and in the end come up
with an algorithm.
Цель: Оптимизировать затраты организации на интернет-трафик, за
счет использования нескольких провайдеров, при условии, что
подключение к интернет в здании, осуществляется по одному проводному
подключению.
Нужно отметить что данная проблема и её решение более
распространена в мегаполисах России. Малый и средний бизнес, а так же
школы, техникумы и университеты, часто сталкиваются с проблемой
провайдеров-монополистов. Данные провайдеры, имея исключительные
права на предоставление услуг подключения к интернету в здание,
запрещают или берут дополнительную плату за подключение к
посторонним провайдерам. Это влечет за собой повышение цен,
некачественную работу службы поддержки, и отсутствие или дороговизну
резервного канала. Для того что бы достичь нашей цели, нам понадобиться
решить 3 задачи.
1. Определить для чего именно будет использоваться подключение к
интернету.
2. Определить подходящие для нас способы подключения.
3. Выбрать платформу для реализации поставленной задачи.
Когда перед сотрудником поставлена задача, требующая доступа в
интернет, сотрудник воспользуется определенным программным
обеспечением. Это программное обеспечение будет использовать
определенный протокол для работы с интернетом, поэтому анализировать
потребности легче всего с точки зрения протоколов прикладного уровня.
Как пример рассмотрим наиболее распространенные протоколы
прикладного уровня: HTTP, POP3, SMTP, RDP. HTTP используется для
просмотра страниц в интернете, POP3 и SMTP для переписки по
электронной почте, RDP для удаленного доступа. Необходимо
сгруппировать данные протоколы по наиболее важным критериям.
Критериями могут быть: безопасность, скорость, объем трафика,
надежность, и другие. Предположив, что поддержка HTTP и почтовых
серверов, не входит в наши задачи, разрывы связи по этим протоколам для
нас не критичны. Протокол RDP несколько отличается от остальных. В
случае разрывов связи существует возможность потери данных и сбоев в
работе других программ. Таким образом у нас появилось две группы
различающиеся по необходимой степени надежности. Однако наша цель -
это оптимизация затрат, поэтому необходимо проанализировать протоколы
с точки зрения объема трафика и скорости соединения. Предположим, что
для первой группы проколов: HTTP, POP3, SMTP нам не требуется
высокая скорость, но требуется большой объем. Для RDP нам наоборот
потребуется высокая скорость. Таким образом мы определились, что для
протоколов HTTP, POP3, SMTP нам необходимо подключение
преимуществом которого будет дешевизна трафика, а для протокола RDP
нам понадобится самое стабильное и быстрое подключение.
Итак мы подошли к выбору провайдера. Как было отмечено вначале,
необходимость дополнительного канала появляется не только когда
имеются проблемы с существующим каналами, но и для повышения
стабильности работы системы. Если провайдер является монополистом, то
оптимальное решение это беспроводное подключение.
Существуют различные технологии беспроводных подключений.
Доступ при помощи GPRS, EDGE, UMTS и CDMA осуществляющийся
операторами сотовой связи, является дорогим и медленным, а его главный
плюс: большая площадь покрытия, не настолько важен в больших городах.
Спутниковый интернет, подобно предложению сотовых операторов, имеет
ещё большую зону покрытия, но и существенно дороже, не только в
эксплуатации но и в установке. Подключения по WIFI сетям имеют
относительно высокую скорость и небольшую цену. Однако, безопасность
и площадь покрытия оставляют желать лучшего. Недавно появившиеся
сети WIMAX, сочетающие высокую скорость, низкую цену и покрытие
крупных мегаполисов, возможно будут идеальным решением для многих
пользователей. Предположим, что мы остановились не на одном, а на двух
провайдерах беспроводного доступа в интернет: один медленный но без
ограничения по трафику и второй быстрый но с ограничением трафика.
Это решение даст возможность оптимально настроить сеть, и
минимизировать затраты, а также повысить надежность, что крайне важно
при использовании беспроводных соединений. Какими бы надежными не
были беспроводные подключения, они не будут надежнее проводных. По
этой причине протокол RDP придется подключать по соединению
провайдера-монополиста. Таким образом у нас будут задействованы 3
подключения.
Следующий шаг, это выбор платформы для реализации задачи.
Главный вопрос: Windows или Linux? Сравнивая эти две системы, нам
необходимо учитывать надежность, сложность настройки и финансовый
аспект. Как для системы Windows так и для системы Linux, существуют
готовые программные решения. Для Windows в основном платные, для
Linux в основном бесплатные. Однако они не достаточно гибкие, и их
функциональность крайне ограничена. Для поставленной задачи с 3
подключениями нам больше всего подойдет набор утилит iproute2,
существующая только в Linux. Iproute2 это набор программ позволяющих
управлять параметрами сетевых устройств в ядре Linux.
Итак мы имеем три подключения:
• 1 - беспроводное медленное подключение без ограничения по
трафику, самое дешевое.
• 2 - беспроводное быстрое подключение но с ограничением трафика,
среднее по цене.
• 3 - проводное быстрое подключение с ограничением трафика, самое
дорогое.
Протокол RDP должен всегда использовать соединение 3. Остальные
протоколы должны использовать соединения 1 и 2.
Рисунок 1 - Схема распределения подключений
Стоит отметить, что лишь входящие запросы по протоколу RDP
будут передаваться по 3 подключению, а исходящие по 1 и 2. Разрыв
соединения 1 или 2 не повлияет на работоспособность, поскольку адрес
клиентской машины известен, и данные могут быть высланы с любого
соединения.
Для того, что бы настроить маршрутизацию, нам придется создать
новые таблицы, и только потом мы сможем их изменять. Новые таблицы
создаются в файле /etc/iproute2/rt_tables. Желательно создавать отдельную
таблицу для каждого провайдера, это не только сделает таблицы более
понятными человеку, но и поможет избежать проблем связанных с
недоработками в iproute2. Создав новые таблицы, например: T1, T2 и T3,
необходимо внести в них сами маршруты. Для начала обозначим
некоторые символические значения. $IF1 будет первое соединение, $IF2
второе и $IF3 третье. $IP1 будет IP адрес соответствующий $IF1, $IP2
соответствующий $IF2, $IP3 соответствующий $IF3. Далее $P1 будет
соответствовать IP адресу шлюза первого провайдера, $P2 – второго и $P3
– третьего. $P1_NET будет сетью в которой находится $P1, $P2_NET будет
сетью в которой находится $P2, $P3_NET будет сетью в которой находится
$P3.
Далее добавляем сами маршруты при помощи команд:
ip route add $P1_NET dev $IF1 src $IP1 table T1
ip route add default via $P1 table T1
ip route add $P2_NET dev $IF2 src $IP2 table T2
ip route add default via $P2 table T2
ip route add $P3_NET dev $IF3 src $IP3 table T3
ip route add default via $P3 table T3
Добавим маршруты в таблицу main, в которой и будет происходить поиск
маршрутов:
ip route add $P1_NET dev $IF1 src $IP1
ip route add $P2_NET dev $IF2 src $IP2
ip route add $P3_NET dev $IF3 src $IP3
Обратим внимание, на то, каким образом два подключения 1 и 2
используются одной группой протоколов. Одна из возможностей набора
iproute2 это возможность распределения пакетов по различным маршрутам
при помощи команды:
ip route add default scope global nexthop via $P1 dev $IF1 weight 1 nexthop via $P2 dev
$IF2 weight 1
Данная команда добавит маршрут по умолчанию, по которому 50%
пакетов будет отсылаться по первому соединению и 50% по второму.
Теперь наша задача реализована, но при условие, что RDP сервер
находится на этом же компьютере. Зайти на RDP сервер можно по любому
соединению, однако это не желательно, поэтому при помощи любого
брандмауэра мы можем заблокировать RDP запросы поступающие на
первое и второе подключения.
На данный момент главным минусом созданной нами
маршрутизации, является статический коэффициент распределения
пакетов. При низком уровне сигнала или при его отсутствие, половина
запросов всех пользователей будет потеряна. Чтобы избежать данной
ситуации, нужно постоянно отслеживать состояние соединения. На базе
полученной
информации
возможно
создание
динамических
коэффициентов,
и
использование
таковых
для
оптимального
распределения пакетов. Существуют несколько способов измерить
состояние сети и качество связи. Однако самым удобным и простым
является команда ping, выдающая время затраченное на соединение с
определенным узлом. Альтернативы, такие как tracert способны найти
самый короткий путь, но это не означает, что путь займет меньше времени.
Если два и более подключения находятся в одной подсети, прописав
команду ping на этой стадии, мы получим время затраченное на
подключение, но мы не сможем указать какое именно подключение мы
используем. Для решение данной проблемы необходимо создать еще одну
таблицу маршрутизации которая будет использована лишь одним
подключением и будет использована для подключения лишь к одному
узлу. Для этого стоит создать отдельное правило при помощи команды ip
rule add. Поскольку эта таблица не будет использована ни кем другим,
изменения в ней не приведут к обрывам связи, в то время как изменения в
таблицах Т1, Т2, Т3 и main, мгновенно отразятся на всех пользователях.
Маршруты в данной таблице будут периодически меняться, настраиваясь
под отдельного провайдера, после чего будет произведена проверка при
помощи команду ping. Получая данную информацию, мы сможем
изменять коэффициенты ($COEF) и вносить их следующим образом:
ip route add default scope global nexthop via $P1 dev $IF1 weight $COEF1
nexthop via $P2 dev $IF2 weight $COEF2
Если мы не будем знать когда нужно поменять коэффициенты,
особой пользы они нам не принесут. Для этого необходимо просто
использовать команду ping и проверить время соединения с любым узлом,
кроме того который уже используется для проверки каждого соединения
по отдельности. Как сказано выше, результатом будет время соединения с
определенным узлом по одному из соединений. Создав бесконечный цикл,
и используя в нем команду ping, мы сможем отслеживать состояние
каждого подключения и при необходимости изменять коэффициенты. Так
же стоит добавить паузу, после каждой успешной проверки подключения.
Это позволит не так сильно загружать компьютер.
Рисунок 2 – Изменение коэффициентов
Таким образом система становится автономной, и сама оптимизирует
соединение. Однако в случае полного отказа одного из подключений,
доступ в интернет будет затруднен. В случае отказа двух подключений,
интернета не будет. Эту проблему можно исправить за счет нескольких
этапов проверок и последующего выбора подключений. Первый и самый
главный этап, проверка соединения с удаленными узлами в сети интернет,
при помощи утилиты ping. Данная проверка позволит определить
необходимость проведения других проверок. Второй этап, это проверка
настройки соединения. Файл /etc/interfacesсодержит такую информацию
как название соединения, IPадрес, подсеть и шлюз. Если соединение
настроено верно и имеются драйверы для аппаратного обеспечения, то при
наборе команды ifconfig–а,оно появится в списке. Условие if [[ "`ifconfig |
grep " $ETH1" | cut -d" " -f1`" == "$ETH1" ]] просканирует результат
команды ifconfig и выдаст 0 если условие не выполняется, то есть
соединение отсутствует в списке, или 1 если соединение имеется в списке.
Третий этап, это проверка на наличие физического соединения с сетью,
такого как кабель. Утилита iplink показывает различную информацию о
каждом подключении. Появление флага NO-CARRIER означает отсутствие
соединения. Условие If [[ `ip link | grep "$ETH1" | cut -d, -f1 | cut -d" " -f3`
!= "<NO-CARRIER" ]] выдаст 0 если соединение отсутствует, или 1 если
все подключено. Последний четвертый этап проверки касается в основном
лишь беспроводных соединений. В случаях кратковременных обрывов
связи, нарушается целостность таблиц маршрутизации. Выход из этой
ситуации, это сохранение данных таблиц при успешной работе системы, и
последующие их сравнение с существующими. После выполнения всех
проверок мы можем быть уверены, что подключения работают.
Рисунок 3 – Проверка соединений
Теперь данная система умеет находить проблемы и частично их
исправлять, однако при выходе из строя аппаратного обеспечения
соединений, она не сможет правильно настроить таблицы маршрутизации.
Поэтому нужно создать возможные сценарии неполадок и только потом
настраивать таблицы.
Рисунок 4 – Выбор сценария
Необходимо учитывать следующие приоритеты:
• Протокол RDP должен использовать самое надежное соединение.
• Для увеличения скорости и снижения затрат, соединения 1 и 2
должны быть использованы в паре.
• Соединение 3, как самое дорогое не должно быть использовано для
протоколов HTTP, POP3 и SMTP, кроме случаев когда оно остается
единственным доступным.
В итоге мы получаем автономную систему контроля соединений,
способную как исправлять проблемы так и компенсировать их. Данная
система не требует дополнительного оборудования, соответственно её
внедрение в малый и средний бизнес а так же в образовательные заведения
будет крайне эффективной мерой по оптимизации затрат.
Список литературы
1. Тони Боттс. LINUX руководство администратора сети [Текст]. /
Тони Боттс, Терри Доусон, Грегор Н. Перди//.- М.: КУДИЦ-Пресс, 2006.
2. Джо Брокмайер, Ди-Эн Лебланк, Рональд Маккарти.
Маршрутизация в Linux[Текст]. - М.: Вильямс, 2002.
3. Linux Advanced Routing & Traffic Control (LARTC) [Текст]. /
http://lartc.org
4. Хизер Остерлох. Маршрутизация в IP – сетях. Принципы,
протоколы, настройка [Текст]. – М.: ДиаСофтЮП, 2002.
Сведения об авторах
Александров Дмитрий Алексеевич
Заместитель начальника по информатизации
Московский государственный техникум технологии, экономики и права им. Л.Б
Красина, г. Москва
Тел.: + 7(985)233-16-96
E-mail: et166@yandex.ru
Борисов Сергей Петрович
Преподаватель
Московский государственный университет приборостроения и информатики, г. Москва
Тел.: + 7(916)341-11-34
E-mail: borisov_s@inbox.ru
Гуськов Алексей Александрович
Студент
Московский государственный технический университет «МАМИ», г. Москва
Тел.: + 7(925)023-39-09
E-mail: agouskov@gmail.com

