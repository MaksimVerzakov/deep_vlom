1
УДК 004.4'4
ДИЗДЕК – ДИЗАССЕМБЛЕР С ЭЛЕМЕНТАМИ ДЕКОМПИЛЯЦИИ
Кулагин О.В.
ФГУП «Пензенский научно-исследовательский электротехнический институт», г. Пенза,
тел. 8-(950)-236-11-31, e-mail: ruz1967@yandex.ru
Аннотация. В статье представлен созданный автором дизассемблер с эле-
ментами декомпиляции Диздек, способный подстраиваться под разные про-
цессоры. От других дизассемблеров его отличает возможность трансляции
дизассемблированной программы в высокоуровневые тексты на языках:
Паскаль в версии системы Дельфи 6.0, Си и Verilog, адекватные исходной
программе.
Ключевые слова: дизассемблирование, декомпиляция, программа, файл,
формат.
Введение. Термин «декомпиляция» употребляется для обозначения преобразований
машинных кодов программ в соответствующие им тексты на языках программирования. Эти
языки могут быть: в одних случаях – языками как низкого (ассемблер), так и высокого уров-
ня, а в других случаях – только языками высокого уровня. В последнем случае обычно тре-
буется сформировать текст программы, максимально приближенный к исходному, что важно
при верификационных испытаниях программ. Для знакомства с проблемой декомпиляции
можно рекомендовать работы [1, 2].
Представляемый в данной работе программный комплекс Диздек (Дизассемблер-
декомпилятор) в первую очередь предназначен для переноса программ на другие программ-
ные и аппаратные платформы. А для этого не обязательно восстанавливать именно исходный
текст программы – достаточно получить текст, адекватный дизассемблируемой программе,
который после последующей компиляции позволит получить программу, работающую иден-
тично исходной. Так как для переноса на другие платформы нужен ЯПВУ, то в Диздеке опи-
сания ассемблерных команд преобразовываются в описания на ЯПВУ. Типы данных ЯПВУ
при этом не восстанавливаются, исходные компиляторы не анализируются. Во избежание
разночтений со специалистами, занятыми «высокоуровневой» декомпиляции (с восстановле-
нием типов данных и анализом компиляторов), Диздек назван дизассемблером с элементами
декомпиляции.
Общая характеристика Диздека. Диздек предназначен для дизассемблирования ис-
полняемых модулей программ разных процессоров с формированием для этих модулей:
1) ассемблерных текстов и единообразных математизированных низкоуровневых описаний
программ, пригодных для дальнейших равносильных преобразований;
2) математических описаний алгоритмов программ на основе оригинального математиче-
ского аппарата – алгебры последовательностей индексных объектов-соответствий
(АПИОС) [3-6], позволяющего исключить операторы адресных переходов из описания
программы;
3) текстов программ на языках программирования высокого уровня (ЯПВУ): Паскаль в вер-
сии Дельфи 6.0 (далее – Паскаль-Дельфи), и Си.
4) описаний схем узлов ПЛИС на языке описания аппаратуры Verilog для аппаратной реа-
лизации алгоритма программы в виде узла на ПЛИС.
В настоящее время Диздек настроен на дизассемблирование программ процессора
TMS320C50 и формирование текста на ЯПВУ Паскаль-Дельфи. Ведутся работы по реализа-
ции преобразований формируемых Диздеком единообразных математизированных низко-
уровневых описаний программ в тексты на языке Verilog, что позволит осуществлять аппа-
ратную компиляцию исполняемых модулей программ – непосредственное автоматическое
2
преобразование программ в схемы для ПЛИС. С учетом ряда достижений отечественной
электронной промышленности, выпускающих базовые матричные кристаллы и некоторые
ПЛИС, аппаратная компиляция позволит решить проблему обеспечения разрабатываемой
аппаратуры отечественной элементной базой. Другое очень важное свойство аппаратной
компиляции – возможность отладки алгоритма будущего аппаратного узла в виде програм-
мы, что гораздо проще и удобнее всех видов моделирования аппаратных узлов.
В табл. 1 представлен пример исходной программы для процессора TMS320C50 и глав-
ный модуль ее декомпилированного варианта. Помимо этого модуля для любой декомпили-
рованной программы Диздек формирует еще два модуля – список базовых блоков и список
глобальных параметров.
Список базовых блоков содержит используемые в программе базовые блоки – последо-
вательности линейных команд. В данной программе присутствуют три базовых блока с име-
нами KPMBazblok1 – KPMBazblok3. В первом базовом блоке содержится 46 операторов
языка Паскаль, во втором – 12 операторов, в третьем – 15 операторов.
В списке глобальных параметров содержатся: 1) объявления массивов, соответствую-
щих внешней памяти, используемой программой, 2) условия, используемые всеми команда-
ми процессора, и 3) операции, зависящие от этих условий (назовем их предикатными опера-
циями). В данной программе используется три условия и три предикатных операции, каждое
из которых представлено одним оператором языка Паскаль.
Общий объем декомпилированной программы получается больше объема исходной
программы. Это объясняется следующим:
1. Всякая команда процессора представляет собой всего лишь предписание на выполнение
определенных действий, алгоритм выполнения которых от программиста скрыт в аппа-
ратной части самого процессора. Для эмуляции же любого процессора необходимы
именно точные описания алгоритмов для каждой команды эмулируемого процессора, а
не предписания на их выполнение. Понятно, что объем описания любого алгоритма
всегда будет больше объема предписания на его вызов.
2. Диздек только разработан, и оптимизирующие преобразования базовых блоков в нем
пока не реализованы.
После дизассемблирования программа разбивается на базовые блоки и управляющие
команды. Последние преобразуются при помощи АПИОС в конструкции ЯПВУ.
Таблица 1 – Пример декомпилированной программы.
Исходная программа
Декомпилированная программа (главный модуль)
.asect “vect“, 0000h
unit KPM2OZUC;
B INIT
interface
.asect “TEKCT“, 0020h
uses SysUtils, GLOBAL, KPM2OZUC_SBB;
INIT SETC
INTM
MAR *,AR7
procedure GLAV_KPM2OZUC;
LAR AR3,#8000h
implementation
LDP #0H
LACC #0017H
procedure GLAV_KPM2OZUC;
LACC #000FH
var i:word;
SAMM 2AH
adres:longword;
LACC #0FFFFH
begin
SAMM 28H
adres:=$00000000;
LACC #0FFFFH
repeat
SAMM 28H
case adres of
ZAP
$00000041:begin
{Блок No 1}
SACL *
KPMBazblok3;
XOP7 LAR AR7,#8000h
adres:=$00000044;
LACC #0FFFFH
end;
3
Исходная программа
SAMM 19H
TOZU
SAR
AR7,*+
CMPR
3
BCND
TOZU, TC
LAR AR7,#8001h
LACC #5a51h
SACL *
XOP5 NOP
CLRC XF
.end
Декомпилированная программа (главный модуль)
$00000000:begin
{Блок No 2}
KPMBazblok1;
repeat
KPMBazblok2;
until not(((regm[$0005] shr 11) and $00000001)=1);
adres:=$00000041;
end;
else begin
writeln(perekod(' - Сформирован непредусмот-
ренный адрес:'),inttohex(adres,8),'h.');
end;
end;
until adres=$00000044;
end;
end.
Для учета сложных связей в программе, вызванных как структурой самой дизассембли-
руемой программы, так и косвенными адресными переходами (переходами по адресам, на-
ходящимся в регистрах, а не указанными в самих командах), главный модуль представляется
следующим образом (на языке Паскаль):
adres:=начальное значение;
repeat
case adres of
адрес1:блок1;
адрес2:блок2;
:::::::::::::
адресN:блокN;
else сообщение о присвоении переменной adres непредусмотренного значения
end;
until adres=конечное значение;
Эта форма предусматривает представление программы в виде цикла, содержащего опе-
ратор выбора. Этим выбором управляет переменная adres, соответствующая начальным ад-
ресам базовых блоков дизассемблируемой программы. Эта же переменная определяет также
продолжение/окончание выполнения цикла. Альтернативам оператора выбора соответствуют
базовые блоки дизассемблируемой программы (обозначенные как блок1, блок2, блокN) с их
начальными адресами (соответственно: адрес1, адрес2, адресN). В конце каждого блока пе-
ременной adres присваивается очередное значение. Если данной переменной будет присвое-
но значение, отсутсвующее в операторе case, сработает ветвь else, которая выведет сообще-
ние о том, что переменной adres присвоено непредусмотренное значение. Это свойство дан-
ной схемы представления программы, назовем ее самовыборочной схемой, позволяет доста-
точно легко анализировать косвенные переходы в программе. В случае косвенного перехода
в декомпилируемой программе по адресу, который ранее не был выявлен, появится сообще-
ние о непредусмотренном адресе с указанием этого адреса, после чего указанное значение
можно будет явно ввести в список точек входа дизассемблируемой программы.
Принцип построения Диздека. Основные подходы к построению дизассемблеров
можно условно поделить на два типа. Первый тип предполагает построение дизассемблеров
с жестким алгоритмом работы, который пользователь никак не может изменить. По такому
типу построено большинство существующих дизассемблеров, включая, например, известный
дизассемблер Sourcer. Второй тип предполагает построение интерактивных дизассемблеров,
алгоритм работы которых конечный пользователь может менять в выгодную для себя сторо-
ну. Так построен дизассемблер IDA, в котором пользователь может при помощи встроенного
4
Си-подобного языка практически полностью переписать его функции. С одной стороны, ин-
терактивность дизассемблера позволяет опытному пользователю исправлять огрехи создате-
лей дизассемблера и модифицировать его под свои нужды. Но с другой стороны, использо-
вание дизассемблера IDA при верификационных испытаниях любой программы вынудит
экспертную организацию одновременно верифицировать две программы: 1) исследуемую
программу, и 2) Си-подобную программу, модифицирующую функции дизассемблера.
Поэтому, указанный Си-подобный язык является недостатком дизассемблера IDA, а не
его достоинством.
Другими неприятными особенностями IDA являются: 1) его англоязычность (у москов-
ского автора [7]) и 2) полное отсутствие технической документации на него. Автор дизас-
семблера IDA почему-то считает, что пользователи его пакета свободно владеют английским
языком и поймут принцип работы IDA и без документации.
Подстройка инструментального программного обеспечения (ПО) под нужды конечного
пользователя действительно является ценным свойством. Однако, возможность написания и
использования дополнительных встроенных приложений к пакету скорее всего свидетельст-
вует либо о перекладывании автором пакета на конечного пользователя задачи исправления
своих огрехов, либо о неспособности автора пакета четко очертить круг решаемых им задач.
Вследствие этого, в Диздеке возможность подстройки пакета под нужды конечного пользо-
вателя решается совершенно по-другому, чем в IDA. А автоматическая реконструкция
управляющих программных конструкций делает ненужным такие, использованные в IDA
«красивости», как стрелки, обозначающие связи в программе, и всплывающие окна с текста-
ми подпрограмм. Однако, возможность перехода в дизассемблированной программе по ука-
занному в команде адресу и возможность возврата на один ход назад в Диздеке существуют.
В Диздеке создан своего рода инструментарий и однородные информационные струк-
туры (списки), с помощью которых можно решать самые разные задачи по дизассемблиро-
ванию. Эти компоненты названы объектами. К ним относятся:
1) подпрограмма, дизассемблирующая очередную команду,
2) список косвенных переходов,
3) список точек входа,
4) список безусловных переходов.
Кроме объектов существуют также переменные, к которым можно получить доступ из-
вне. Они названы элементами. К ним относятся:
1) адрес дизассемблируемой команды,
2) адрес команды, следующей за дизассемблируемой командой,
3) адрес перехода из управляющей команды,
4) адрес команды, подлежащей дизассемблированию,
5) начальный адрес интервала дизассемблирования,
6) конечный адрес интервала дизассемблирования,
7) номер используемой точки входа в программу по списку точек входа,
8) 32-разрядный указатель на регистр, определяющий косвенный переход,
9) переменная-признак косвенного перехода.
В процессе дизассемблирования могут встречаться разные ситуации, которые в даль-
нейшем будут названы условиями. Это прежде всего следующие ситуации:
1) обнаружение косвенного адресного перехода,
2) обнаружение косвенного вызовы подпрограммы,
3) обнаружение прямого адресного перехода,
4) обнаружение прямого вызовы подпрограммы,
5) достижение конца пути дизассемблирования,
6) начало дизассемблирования.
При необходимости могут пользователем могут быть введены и дополнительные усло-
вия.
Суть программируемой настройки Диздека сводится к подбору для каждого условия
5
соответствующей управляющей последовательности, которые названы управляющими запи-
сями. В них могут выполняться различные действия с объектами и элементами. При возник-
новении соответствующего условия в процессе своей работы, Диздек обращается к набору
управляющих записей – словарю – и извлекает для исполнения оттуда нужную запись. Так
управляющие записи определяют конкретный алгоритм работы Диздека. Это может быть и
самый примитивный алгоритм, дизассемблирующий все команды подряд без какого-либо их
анализа, и алгоритм дизассемблера Sourcer, в котором производится анализ точек входа и
отслеживаются адресные переходы. В Диздеке не решена проблема дизассемблирования са-
момодифицирующегося кода. Ее решение требует постановки соответствующей работы.
Таким образом Диздек предоставляет пользователю некоторый инструментарий, а по-
рядок его использования определяет конечный пользователь при помощи словаря из 29-40
управляющих записей (СУЗ). Исследовать СУЗ можно и без знания правил их написания –
Диздек сам сформирует их разъяснения на русском языке. Например, такие:
1. Начало процесса дизассемблирования: Св А - [27].
Разъяснение управляющей записи: Это начальная запись, с которой начинается работа
дизассемблера. В адрес дизассемблируемой команды записать очередное значение из списка
точек входа. Вызвать управляющую запись No 27.
2. Конец пути дизассемблирования: Св А -.
Разъяснение управляющей записи: В адрес дизассемблируемой команды записать очеред-
ное значение из списка точек входа.
3. Список адресов входа пуст: Св => Ск => Сб => К.
Разъяснение управляющей записи: Вывести в окно дизассемблера список точек входа. Вы-
вести в окно дизассемблера список косвенных переходов. Вывести в окно дизассемблера спи-
сок безусловных переходов. После этого необходимо прервать работу дизассемблера.
В этих записях в строчках, выделенных жирным шрифтом, после двоеточия представ-
лены управляющие записи в символическом виде.
Описания команд, регистров и аппаратных прерываний процессора, исполняемые мо-
дули которого необходимо дизассемблировать, сводятся в специализированную базу данных
(СБД), формируемую отдельно. Для файлов исполняемых модулей программ создан специ-
альный промежуточный формат (файл *.obf), в котором указывается: разрядность команд,
тип процессора и операционная система. После открытия входного файла Диздек автомати-
чески находит СБД на используемый процессор и дизассемблирует его.
Кроме формата файлов *.obf Диздек воспринимает и стандартные форматы файлов ис-
полняемых модулей программ, преобразовывая их в формат *.obf. Это файлы OUT для про-
цессора TMS320C50 и все виды ЕХЕ-файлов. Однако, в настоящее время СБД создана толь-
ко для процессора TMS320C50.
Меню программы Диздек. При запуске программы Диздек (файл Dizdek.exe) появля-
ется окно, представленное на рис. 1.
6
Рис. 1. Основное окно программы Диздек.
В основном окне расположено меню и дублирующий его набор кнопок на верхней па-
нели. Кнопки эти сгруппированы в двенадцать групп. Первая группа кнопок верхней панели
соответствует подменю «Файл», выполняющему стандартные действия с файлами (в данном
случае дизассемблируемыми): 1) открывание, 2) закрывание, и 3) выход из программы. Три
следующих группы кнопок верхней панели (со второй по четвертую) соответствуют подме-
ню «Редактирование», ориентированному на удобство работы с исходным ассемблерным
текстом программы или ее листингом: перекодировку и сопутствующие ей операции выде-
ления текста листинга и его сохранение (последнее – в подменю «Файл»). В подменю «Ре-
дактирование» также предусмотрена команда, определяющая редактирование СУЗ. Подме-
ню «Редактирование» представлено на рис. 2.
7
Рис. 2. Подменю «Редактирование».
На рис. 3 представлено подменю «Декомпиляция». Ему соответствуют четыре группы
кнопок верхней панели (с пятой по восьмую), оно выполняет основные режимы работы Диз-
дека: 1) простое дизассемблирование, 2) дизассемблирование с автоматическим выявлением
всех фрагментов кода, способных быть участками программы. Последний вид дизассембли-
рования назван круговым. Он предусматривает анализ дизассемблируемого пути на наличие
недопустимых кодировок команд. При их отсутствии путь считается программным кодом, а
при их наличии – фрагментом данных. Предусмотрено также: 1) последующее дизассембли-
рование не до конца обработанного кода, 2) разные способы записи точек входа в програм-
му, 3) просмотр содержимого файла без дизассемблирования, 4) просмотр MZ-заглушек в
ЕХЕ-файлах форматов NE и PE. Одна из команд этого меню предусматривает формирование
отчета о дизассемблировании. Наконец, выполняется синтез описания алгоритма дизас-
семблируемой программы на ЯПВУ или языке Verilog, для чего из Диздека вызываются спе-
циальные консольные программы APIOS.EXE, PASKAL.EXE, Si.EXE, Verilog.EXE. На рис. 4
представлено окно, в котором устанавливаются параметры декомпиляции.
8
Рис. 3. Подменю «Декомпиляция».
9
Рис. 4. Параметры декомпиляции.
На рис. 5 представлено подменю «Обход», которому соответствуют три группы кнопок
верхней панели (с девятой по одиннадцатую), оно обеспечивает удобство обхода дизассемб-
лированной программы и просмотр скрытых данных в программе.
Под скрытыми данными подразумеваются фрагменты программного кода, восприни-
маемые как данные. В Диздеке выделение таких фрагментов возможно по двум критериям:
1) отсутствия точек входа в таких фрагментах, и 2) наличия во фрагментах недопустимых
команд.
Последний пункт этого меню «Пользовательские регистры» позволяет создавать в
отдельном окне, представленном на рис. 6, список с регистрами пользователя, используемы-
ми в дизассемблируемой программе. В результате в дизассемблированной программе можно
будет легко искать обращения к этим регистрам по записи или чтению.
10
Рис. 5. Подменю «Обход».
Рис. 6. Окно для формирования списка пользовательских регистров.
11
Последнее подменю «Информация», включает единственную команду, которой соот-
ветствует последняя кнопка на верхней панели. Она вызывает вывод общей информации о
программе в специальном окне, представленном на рис. 7.
Рис. 7. Информация о программе.
Файл СУЗ подключается по умолчанию. Для редактирования или создания СУЗ необ-
ходимо выбрать пункт меню «Редактирование/Редактировать СУЗ» или нажать кнопку на
верхней панели с надписью СУЗ. Появится окно редактирования СУЗ, представленное на
рис. 8.
Рис. 8. Окно редактирования СУЗ программы Диздек.
В окне «Создание и редактирование управляющих записей дизассемблера» можно
создавать или редактировать СУЗ, как названия условий, так и управляющие записи для со-
ответствующих команд. Для открывания и сохранения файлов СУЗ, добавления и удаления
12
строк в таблице есть соответствующие кнопки. По нажатию кнопки «Сформировать файл
печати» будет сформирован файл в формате RTF редактора Microsoft Word, содержащий
разъяснения СУЗ. По нажатии кнопки «Закрыть» это окно закрывается.
Отредактированный файл СУЗ можно выбрать в качестве используемого по умолча-
нию. Для этого необходимо установить флажок «Загружать этот СУЗ по умолчанию» в ок-
не «Общие параметры» Диздека.
Выбор входного файла и прерываний. Файл для дизассемблирования выбирается че-
рез пункт меню «Файл/Открыть». Он вызывает появление стандартного окна выбора фай-
ла, которое позволяет выбирать файлы в форматах OBF, OUT, EXE, DLL. В случае выбора
файла в окне «Общие параметры» Диздека появляются: 1) названия входного файла, и 2)
список аппаратных прерываний соответствующего процессора с флажками для выбора ис-
пользуемых прерываний. Пример окна с выбранным входным файлом и выбранными аппа-
ратными прерываниями приведен на рис. 9. В отличие от окна, представленного на рис. 1, в
окне на рис. 9 указан входной файл.
Рис. 9. Основное окно Диздека с выбранным входным файлом и прерываниями.
В нижнем окошке можно выбирать аппаратные прерывания, использованные в дизас-
семблируемой программе. Кнопкой «Выбрать все» можно выбрать сразу все имеющиеся
прерывания, а кнопкой «Очистить все» можно выполнить обратное действие. При выборе
хотя бы одного прерывания в ассемблерном листинге программы будут указаны названия
выбранных прерываний в виде, представленном в окошке (до слова «Вектор»). Однако, во
встроенных программах каждое прерывание жестко привязано к определенным функциям, и
было бы удобно видеть в листинге названия этих функций, а не только названия прерываний.
Ввод указанных названий в дизассемблированную программу существует. С этой целью в
13
окне «Общие параметры» Диздека существует поле «Распределение прерываний в про-
грамме» с двумя флажками: 1) Определить назначение прерываний в программе, и 2)
Исправить / просмотреть этот список. По установке первого флажка появится окно выбора
файла распределения прерываний, в котором каждому прерыванию поставлено в соответст-
вие выполняемая им функция. Для создания такого файла или исправления существующего
надо установить флажок «Исправить / просмотреть этот список». После его установки
также появится окно выбора файла распределения прерываний, в котором в этом случае надо
выбрать каталог, куда должен быть записан новый файл, и ввести имя этого файла. При от-
сутствии файла в каталоге программа выдаст запрос на его создание, представленный на рис.
10.
Рис 10. Окно, предлагающее создать файл с именем «Новый файл прерываний».
По нажатии кнопки «Да» в программе сохранится имя вновь введенного файла и поя-
вится окно редактирования назначений прерываний, представленное на рис. 11.
Рис. 11. Окно редактирования назначений аппаратных прерываний.
В строчки таблицы данного окна необходимо вводить названия функций, выполняемые
аппаратными прерываниями. Для сохранения вновь составленного или откорректированного
списка с распределением аппаратных прерываний необходимо нажать сначала кнопку «Со-
хранить файл распределения прерываний», а затем кнопку «ГОТОВО». Произойдет воз-
врат в основное окно Диздека, в котором теперь уже будет указано имя файла распределения
прерываний.
От выбранного файла распределения прерываний в программе можно отказаться, если
вторично установить (если он уже установлен, то – сбросить и снова установить) флажок
«Определить назначение прерываний в программе». В появившемся окне выбора файла
надо в строке удалить имя выбранного файла и нажать кнопку «Отмена». После этого в поле
«Распределение прерываний в программе» исчезнет имя файла распределения прерыва-
ний.
14
Дизассемблирование и визуальный контроль программ. После выбора входного
файла может быть выполнено дизассемблирование при помощи команды меню «Декомпи-
ляция/Дизассемблирование». Если при этом сброшен пункт меню «Декомпиля-
ция/«Круговое» дизассемблирование программ», то выполняется простое дизассемблиро-
вание, при котором все фрагменты программного кода, не имеющие точек входа, будут счи-
таться скрытыми данными. Однако, при наличии косвенных переходов в программе такие
фрагменты могут быть ветвями программы, на которые выполняется указанные переходы.
Для выявления подобных фрагментов предусмотрено так называемое «круговое» дизас-
семблирование, заключающееся в циклическом (т.е. круговом, если перевести на русский
язык слово «цикл») выполнении простого дизассемблирования. При этом после каждого
цикла простого дизассемблирования в список точек входа заносится начальный адрес одного
из недизассемблированных фрагментов программного кода. После этого на новой итерации
цикла этот фрагмент будет дизассемблирован, и дизассемблер проверит наличие недопусти-
мых команд в программе. При их отсутствии фрагмент будет считаться программным кодом.
При их появлении фрагмент будет отнесен к скрытым данным внутри программного кода, и
на очередных итерациях «кругового» дизассемблирования начальный адрес такого фрагмен-
та не будет использоваться. Заканчивается «круговое» дизассемблирование после того, когда
в дизассемблированной программе не останется непроверенных фрагментов кода.
Вызывается круговое дизассемблирование также командой меню «Декомпиля-
ция/Дизассемблирование», но уже при выделенном пункте меню «Декомпиля-
ция/«Круговое» дизассемблирование программ».
Неоконченное ранее дизассемблирование можно продолжить потом. Для этого надо
просто выйти из программы после завершения ее работы (нужные файлы на диске сохранят-
ся), а при новом запуске программы выбрать входной файл и командой меню «Декомпиля-
ция/Продолжить ранее начатое дизассемблирование» восстановит ранее достигнутое со-
стояние дизассемблирования выбранной программы. Если соответствующих промежуточных
файлов нет в каталоге, в котором находится выбранный входной файл, то в ответ на команду
«Декомпиляция/Продолжить ранее начатое дизассемблирование» появится окно, пред-
ставленное на рис. 12.
Рис. 12. Окно, предупреждающее о невозможности продолжения дизассемблирования.
После загрузки ранее дизассемблированного файла можно продолжить его дизассемб-
лирование обычным порядком. На рис. 13 представлено окно дизассемблера по окончании
дизассемблирования.
15
Рис. 13. Вид программы по окончании процесса дизассемблирования.
На рис. 13 видно, что в главном окне программы появляются следующие окна:
1. Дизассемблированная программа. Содержит адреса и коды дизассемблированной
программы, а также два вида описаний этих кодов: ассемблерные мнемоники и едино-
образное математизированное низкоуровневое описание в виде постфиксных матема-
тических записей.
2. Запись ОЗУ программ. Содержит адреса команд, записывающих память программ для
процессоров гарвардской архитектуры. Для процессоров неймановской архитектуры
это поле будет всегда пустым.
3. Косвенные переходы. Содержит адреса команд косвенных переходов.
4. Переходы из программы! Содержит адреса команд переходов на адреса, лежащие за
пределами программного кода.
5. Точки входа. Все точки входа, выявленные при дизассемблировании.
6. Ошибочные строки! Содержит адреса команд с недопустимыми кодами.
7. Подпрограммы. Содержит адреса подпрограмм.
8. Подпрограммы без RET. Содержит адреса так называемых «подпрограмм, не содер-
жащих команд возврата RET». В качестве таковой может считаться, например, тело
цикла в команде, в которой цикл определяется только лишь адресными метками, а не
переходами.
Если рядом со входным файлом находится ассемблерный файл с расширениями ASM
или LST, то внизу появится еще одно окно – «Ассемблерный текст программы». В нем
отобразится содержимое этого файла, причем предпочтение будет отдано файлу с расшире-
нием LST. Это позволит визуально сравнить листинг дизассемблируемой программы с ди-
зассемблированным текстом. Имеющиеся в обеих окошках полосы выбора строки позволяют
16
отмечать в обеих окошках одинаковые команды и облегчать тем самым листание содержи-
мого окошек.
Если в окне «Дизассемблированная программа» какое-либо описание дизассембли-
рованной команды – мнемоническое или математизированное – не видно полностью в своей
ячейке, то оба эти описания команды могут быть выведены полностью в отдельное окно по
двойному щелчку левой кнопкой мыши. Пример такого окна представлен на рис. 14. Если в
этой команде содержится адресный переход, вызов подпрограммы, или же на эту команду
осуществляется переход, то информация об этом будет указана в данном окне в качестве
признаков данной команды.
Рис. 14. Вид длинных описаний команды в отдельном окне.
При выборе какого-либо адреса в окошках: «Запись ОЗУ программ», «Косвенные пе-
реходы», «Переходы из программы!», «Точки входа», «Ошибочные строки!», «Подпро-
граммы», «Подпрограммы без RET» и окошке «Точки входа в программу», расположен-
ном в окне «Общие параметры», выполняется автоматический переход на данный адрес в
окне «Дизассемблированная программа». Также предусмотрена навигация по дизассемб-
лированному тексту: переход по адресу перехода из команды (командой меню «Об-
ход/Переход по адресу перехода из команды») и возврат на предшествующий адрес по ко-
манде меню «Обход/Возврат на прежний адрес».
Дизассемблирование/декомпиляция программ с использованием Диздека. Начина-
ется с открытия файла требуемого исполняемого модуля (команда «Файл/Открыть») и его
дизассемблирования (команда «Декомпиляция/Дизассемблирование») при сброшенном
флаге ««Круговое» дизассемблирование программ» в меню «Декомпиляция». Диздек
воспринимает стандартный формат исполняемых модулей для процессоров TMS320C50 с
расширением OUT. Для дизассемблирования исполняемые модули предварительно переко-
дируются в формат OBF. После дизассемблирования программы кодера липредера окно
Диздека будет выглядеть так, как представлено на рис. 13.
По окончании дизассемблирования необходимо прежде всего обратить внимание на на-
личие адресов в окошках «Запись ОЗУ программ», «Косвенные переходы», «Переходы из
программы!» и «Ошибочные строки». Если ни в одном из них нет адресов, то дизассемб-
лирование считается полностью завершенным, а недизассемблированные участки являются
либо данными, либо неиспользуемым (мертвым) кодом. Наличие же адресов в этих окошках
указывает на следующие ситуации:
1. В окошке «Запись ОЗУ программ» только для процессоров с гарвардской архитекту-
рой указываются команды, записывающие в память программ информацию, которая
может быть скрытым программным кодом.
2. В окошке «Косвенные переходы» указываются адреса команд косвенных переходов в
программе.
3. В окошке «Переходы из программы!» указываются команды переходов на адреса, ле-
17
жащие за пределами адресного пространства программы.
4. В окошке «Ошибочные строки» указываются адреса команд с недопустимой кодиров-
кой. Может означать либо искажение исполняемого модуля, либо скрытые данные
внутри программы.
В случае наличия в программе команд, адреса которых будут указаны в окошках «За-
пись ОЗУ программ», «Косвенные переходы», «Переходы из программы!» необходимы
дополнительные исследования программы на предмет выявления в ней возможного скрытого
кода и скрытых связей.
Запись данных в память программ может быть как тестом неиспользуемой памяти про-
грамм, так и означать самомодификацию программного кода. В настоящее время Диздек не
оснащен средствами исследования самомодифицирующегося кода.
При помощи косвенных переходов управление в программе может быть передано на
участки, первоначально отнесенные дизассемблером к скрытым данным. Однозначно указы-
вать на скрытые данные могут только наличие в них недопустимых кодовых слов (с точки
зрения системы команд процессора). Этот критерий и положен в основу так называемого
«кругового» дизассемблирования в Диздеке. Следовательно, при обнаружении в дизассемб-
лированной программе команд косвенных переходов необходимо выполнить ее повторное
«круговое» дизассемблирование (командой «Декомпиляция / Дизассемблирование») при ус-
тановленном флаге ««Круговое» дизассемблирование программ» в меню «Декомпиляция»).
Выявить конкретные адреса косвенных переходов можно путем декомпиляции про-
граммы на ЯПВУ и ее последующих прогонах в отладчике с разными начальными значения-
ми.
Команды переходов, отсылающих управление за пределы самой программы (на них
укажут адреса в окошке «Переходы из программы!») заставят подробнее проанализировать
окружение дизассемблированной программы. Необходимо будет выяснить, куда конкретно
передается управление – другой программе, или же такой переход является ошибкой этой
программы.
Вывод. В статье представлен оригинальный дизассемблер с элементами декомпиляции
Диздек, ориентированный в основном на переносимость программ на другие программные
или аппаратные платформы. Дана его общая характеристика и подробно описана работа с
ним.
1.
2.
3.
4.
5.
6.
7.
Литература
Гусенко М.Ю., Гусенко Ю.М. Вопросы обратной трансляции программного обеспечения
специального назначения. // Информационные технологии, 2002, No 4. – с. 8 – 18.
Гусенко М.Ю.Декомпиляция типов данных исполняемых программ. // Безопасность ин-
формационных технологий, 1998, No 4. – с. 83 – 88.
Кулагин О.В. Алгебра последовательностей индексных объектов-соответствий: понятие
индексных объектов-соответствий. // Телекоммуникации, 2009, No 6. – c. 2 – 6.
Кулагин О.В. Алгебра последовательностей индексных объектов-соответствий: операции
над индексными объектами-соответствиями. // Телекоммуникации, 2009, No 7. – c. 8 – 13.
Кулагин О.В. Алгебра последовательностей индексных объектов-соответствий: правила
вывода. // Телекоммуникации, 2009, No 8. – c. 11 – 16.
Кулагин О.В. Алгебра последовательностей индексных объектов-соответствий: синтез
программ и аппаратных узлов. // Телекоммуникации, 2009, No 9. – c. 5 – 12.
Касперский К. Образ мышления – дизассемблер IDA. – М.: Солон-Р, 2001. – 448 с.

